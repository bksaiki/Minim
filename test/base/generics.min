;;;
;;; Tests for 'generics'
;;;

(import "../../src/library/base.min")
(import "../../src/library/private/generics.min")

(define num-failed 0)

(define (check-equal? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] eq? failed: expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-true d)
  (unless d
    (display "[FAIL] expected #t")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-false d)
  (when d
    (display "[FAIL] expected #f")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

;; generics construction

(let ()
  (define-generics empty)
  ($generics-type? gen:empty)
  (check-true (null? ($generics-type-methods gen:empty)))
  (void))

(let ()
  (define-generics sequence [stream-empty? s]
                            [stream-first s]
                            [stream-next s])
  ($generics-type? gen:sequence)
  (check-equal? ($generics-type-methods gen:sequence)
                 '((stream-empty? s) (stream-first s) (stream-next s)))
  (void))

(let ()
  (define-generics all-types [0ary]
                             [1ary a]
                             [2ary a b]
                             [3ary a b c]
                             [at-least-0-ary . rest]
                             [at-least-1-ary a . rest]
                             [at-least-2-ary a . rest])
  ($generics-type? gen:all-types)
  (check-equal? ($generics-type-methods gen:all-types)
                '((0ary)
                  (1ary a)
                  (2ary a b)
                  (3ary a b c)
                  (at-least-0-ary . rest)
                  (at-least-1-ary a . rest)
                  (at-least-2-ary a . rest)))
  (void))           

;;  record syntax

(let ()
  (define-record-type point
    (fields x y)
    (methods gen:custom-write
      (lambda (v port mode)
        (fprintf port "(~s ~s)" (point-x v) (point-y v)))))
  
  (define p (make-point 1 2))
  (printf "~a\n" p))

(when (> num-failed 0)
  (error #f "test failed"))
