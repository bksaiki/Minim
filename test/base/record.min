;;;
;;; Tests for 'record'
;;;

(import "../../src/library/base.min")

(define num-failed 0)

(define (check-eq? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] eq? failed: expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-equal? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-not-equal? d0 d1)
  (when (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-true d)
  (unless d
    (display "[FAIL] expected #t")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-false d)
  (when d
    (display "[FAIL] expected #f")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

;; Low-level record procedures
(let ()
  (define point (make-record-type-descriptor 'point #f #f #f #f '#((mutable x) (mutable y) (mutable z))))
  (define make-point (record-constructor point))
  (define point? (record-predicate point))
  (define point-x (record-accessor point 0))
  (define point-y (record-accessor point 1))
  (define point-z (record-accessor point 2))
  (define point-x-set! (record-mutator point 0))
  (define point-y-set! (record-mutator point 1))
  (define point-z-set! (record-mutator point 2))

  (define p (make-point 1 2 3))

  (check-true (point? p))
  (check-true (record? p))
  (check-equal? (record-rtd p) point)
  (check-equal? (point-x p) 1)
  (check-equal? (point-y p) 2)
  (check-equal? (point-z p) 3)

  (point-x-set! p 2)
  (point-y-set! p 3)
  (point-z-set! p 4)

  (point? p)
  (point-x p)
  (point-y p)
  (point-z p)
  
  (check-equal? (point-x p) 2)
  (check-equal? (point-y p) 3)
  (check-equal? (point-z p) 4)

  (void))


;; Basic `define-record-type` test
(let ()

  (define-record-type rec
    (fields
      (immutable a rec-get-a)
      (mutable b rec-get-b rec-set-b!)
      (immutable c)
      (mutable d)
      e))

  (check-true (record-type-descriptor? rec))
  (check-equal? (record-type-field-names rec) #(a b c d e))
  (check-equal?
    (map (lambda (i) (record-type-field-mutable? rec i)) '(0 1 2 3 4))
    '(#f #t #f #t #f))

  ; make sure it doesn't crash
  make-rec
  rec?
  (list
    rec-get-a
    rec-get-b
    rec-c
    rec-d
    rec-e)
  (list
    rec-set-b!
    rec-d-set!)


  (define r (make-rec 1 2 3 4 5))
  (check-equal? (record-rtd r) rec)
  (check-true (record? r))
  (check-true (rec? r))
  (check-false (rec? rec))
  (check-false (rec? 1))

  (check-equal? (rec-get-a r) 1)
  (check-equal? (rec-get-b r) 2)
  (check-equal? (rec-c r) 3)
  (check-equal? (rec-d r) 4)
  (check-equal? (rec-e r) 5)

  (rec-set-b! r #f)
  (rec-d-set! r #f)

  (check-equal? (rec-get-a r) 1)
  (check-equal? (rec-get-b r) #f)
  (check-equal? (rec-c r) 3)
  (check-equal? (rec-d r) #f)
  (check-equal? (rec-e r) 5)

  (void))


;; Test inheritance
(let ()

  (define-record-type point
    (fields (mutable x) (mutable y)))

  (define-record-type cpoint
    (parent point)
    (fields (mutable color)))

  (define pt (make-point 1 2))
  (define cpt (make-cpoint 3 4 'blue))

  (check-true (record? pt))
  (check-true (point? pt))
  (check-equal? (record-type-field-names point) #(x y))
  (check-equal? (record-type-field-names cpoint) #(color))

  (check-equal? (point-x pt) 1)
  (check-equal? (point-y pt) 2)
  ; (cpoint-color pt) => ERROR

  (check-true (record? cpt))
  (check-true (point? cpt))
  (check-true (cpoint? cpt))
  (check-equal? (point-x cpt) 3)
  (check-equal? (point-y cpt) 4)
  (check-equal? (cpoint-color cpt) 'blue)

  (void))


;; Test protocol
(let ()

  (define count 0)
  (define-record-type (:counting-unit: tick :counting-unit:?)
    (fields step)
    (protocol
      (lambda (p)
        (lambda (step)
          (set! count (+ count step))
          (p step)))))

  (tick 1)
  (check-equal? count 1)

  (tick 2)
  (check-equal? count 3)

  (tick 3)
  (check-equal? count 6)

  (void))

;; Test opacity
(let ()

  (define-record-type a)

  (check-false (record-type-opaque? a))
  (check-true (record? (make-a)))

  (define-record-type b
    (opaque #t))

  (check-true (record-type-opaque? b))
  (check-false (record? (make-b)))

  (void))

;; Singleton example
(let ()

  (define nonce-instance #f)
  (define-record-type (:nonce: make-nonce nonce?)
    (opaque #t)
    (protocol
      (lambda (p)
        (lambda ()
          (unless nonce-instance
            (set! nonce-instance (p)))
          nonce-instance))))

  (define n1 (make-nonce))
  (check-false (record? n1))
  (check-true (nonce? n1))

  (define n2 (make-nonce))
  (check-false (record? n2))
  (check-true (nonce? n2))

  (check-eq? n1 n2)

  (void))

;; Test record equality
(let ()
  (define-record-type foo
    (fields a))

  (define f1 (make-foo 1))
  (define f2 (make-foo 1))
  (define f3 (make-foo 2))

  (check-equal? f1 f2)
  (check-not-equal? f1 f3)

  (check-equal? (equal-hash f1) (equal-hash f2))
  (check-not-equal? (equal-hash f1) (equal-hash f3))

  (define-record-type bar
    (fields a b))

  (define b1 (make-bar 1 2))
  (define b2 (make-bar 1 2))
  (define b3 (make-bar 1 3))

  (check-equal? b1 b2)
  (check-not-equal? b1 b3)

  (check-equal? (equal-hash b1) (equal-hash b2))
  (check-not-equal? (equal-hash b1) (equal-hash b3))

  (check-not-equal? foo bar)
  (check-not-equal? (equal-hash foo) (equal-hash bar))

  (void))


(when (> num-failed 0)
  (error #f "test failed"))
