;;;
;;; Tests for 'hashtable'
;;;

(import "../../src/library/base.min")

(define num-failed 0)

(define (check-equal? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-not-equal? d0 d1)
  (when (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

; Test `equal?` for hashtables
(let ()
  (define h1 (make-hashtable))
  (define h2 (make-hashtable))

  (check-equal? h1 h2)

  (hashtable-set! h1 'a 1)
  (check-not-equal? h1 h2)

  (hashtable-set! h2 'a 1)
  (check-equal? h1 h2)

  (hashtable-set! h1 'b 2)
  (hashtable-set! h1 'c 3)
  (hashtable-set! h2 'b 2)
  (hashtable-set! h2 'c 3)
  (check-equal? h1 h2)

  (define keys '(d e f g h i j k l m n o))
  (for-each (lambda (k/i) (hashtable-set! h1 (car k/i) (cdr k/i))) (enumerate keys))
  (for-each (lambda (k) (hashtable-delete! h1 k)) keys)
  (check-equal? h1 h2)

  (define keys '(d e f g h i j k l m n o))
  (for-each (lambda (k/i) (hashtable-set! h1 (car k/i) (cdr k/i))) (enumerate keys))
  (for-each (lambda (k/i) (hashtable-set! h2 (car k/i) (cdr k/i))) (enumerate keys))
  (check-equal? h1 h2)

  (void))


(when (> num-failed 0)
  (error #f "test failed"))
