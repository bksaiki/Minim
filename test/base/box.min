;;;
;;; Tests for 'box'
;;;

(import "../../src/library/base.min")

(define num-failed 0)

(define (check-equal? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-not-equal? d0 d1)
  (when (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

; Test `equal?` for boxes
(let ()
  (check-equal? (box 1) (box 1))
  (check-not-equal? (box 1) (box 2))
  (check-equal? (box '(1 2)) (box '(1 2)))
  (check-not-equal? (box '(1 2)) (box '(3 4)))

  (void))

; Test `hash?` for boxes
(let ()
  (check-equal? (box 1) (box 1))
  (check-not-equal? (box 1) (box 2))
  (check-equal? (box '(1 2)) (box '(1 2)))
  (check-not-equal? (box '(1 2)) (box '(3 4)))

  (void))

; Test `equal-hash` for boxes
(let ()
  (check-equal? (equal-hash (box 'a)) (equal-hash (box 'a)))
  (check-equal? (equal-hash (box 1)) (equal-hash (box 1)))
  (check-equal? (equal-hash (box '(1 2 3))) (equal-hash (box '(1 2 3))))
  (check-equal? (equal-hash (box (box 3))) (equal-hash (box (box 3))))

  (void))


(when (> num-failed 0)
  (error #f "test failed"))
