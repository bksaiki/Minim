;;;
;;; Tests for 'set'
;;;

(import "../../src/library/base.min")

(define num-failed 0)

(define (check-equal? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-true d)
  (unless d
    (display "[FAIL] expected #t")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-false d)
  (when d
    (display "[FAIL] expected #f")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

; Test `make-enumeration`, `enum-set?`, and `enum-set->list`
(let ()
  (define e1 (make-enumeration '()))
  (define e2 (make-enumeration '(a)))
  (define e3 (make-enumeration '(a b c)))

  (check-true (enum-set? e1))
  (check-true (enum-set? e2))
  (check-true (enum-set? e3))

  (check-equal? (enum-set->list e1) '())
  (check-equal? (enum-set->list e2) '(a))
  (check-equal? (enum-set->list e3) '(a b c))

  (void))

;; Test `enum-set-constructor`
(let ()
  (define e1 (make-enumeration '()))
  (define c1 (enum-set-constructor e1))
  (check-equal? (enum-set->list (c1 '())) '())
  (check-equal? (enum-set->list (c1 '(c a))) '())
  (check-equal? (enum-set->list (c1 '(b a c))) '())
  (check-equal? (enum-set->list (c1 '(b c a))) '())
  (check-equal? (enum-set->list (c1 '(e b d c a))) '())

  (define e2 (make-enumeration '(a b c)))
  (define c2 (enum-set-constructor e2))
  (check-equal? (enum-set->list (c2 '())) '())
  (check-equal? (enum-set->list (c2 '(c a))) '(a c))
  (check-equal? (enum-set->list (c2 '(b c a))) '(a b c))
  (check-equal? (enum-set->list (c2 '(e b d c a))) '(a b c))

  (define e3 (make-enumeration '(a b c d e)))
  (define c3 (enum-set-constructor e3))
  (check-equal? (enum-set->list (c3 '())) '())
  (check-equal? (enum-set->list (c3 '(c a))) '(a c))
  (check-equal? (enum-set->list (c3 '(b c a))) '(a b c))
  (check-equal? (enum-set->list (c3 '(e b d c a))) '(a b c d e))

  (void))

;; Test `enum-set-universe`
(let ()
  (define e1 (make-enumeration '()))
  (define c1 (enum-set-constructor e1))
  (check-equal? (enum-set->list (enum-set-universe (c1 '()))) '())
  (check-equal? (enum-set->list (enum-set-universe (c1 '(c a)))) '())
  (check-equal? (enum-set->list (enum-set-universe (c1 '(b a c)))) '())
  (check-equal? (enum-set->list (enum-set-universe (c1 '(b c a)))) '())
  (check-equal? (enum-set->list (enum-set-universe (c1 '(e b d c a)))) '())

  (define e2 (make-enumeration '(a b c)))
  (define c2 (enum-set-constructor e2))
  (check-equal? (enum-set->list (enum-set-universe (c2 '()))) '(a b c))
  (check-equal? (enum-set->list (enum-set-universe (c2 '(c a)))) '(a b c))
  (check-equal? (enum-set->list (enum-set-universe (c2 '(b c a)))) '(a b c))
  (check-equal? (enum-set->list (enum-set-universe (c2 '(e b d c a)))) '(a b c))

  (define e3 (make-enumeration '(a b c d e)))
  (define c3 (enum-set-constructor e3))
  (check-equal? (enum-set->list (enum-set-universe (c3 '()))) '(a b c d e))
  (check-equal? (enum-set->list (enum-set-universe (c3 '(c a)))) '(a b c d e))
  (check-equal? (enum-set->list (enum-set-universe (c3 '(b c a)))) '(a b c d e))
  (check-equal? (enum-set->list (enum-set-universe (c3 '(e b d c a)))) '(a b c d e))

  (void))

;; Test `enum-set-indexer`
(let ()
  (define e (make-enumeration '(a b c)))
  (define i (enum-set-indexer e))

  (check-equal? (i 'a) 0)
  (check-equal? (i 'b) 1)
  (check-equal? (i 'c) 2)
  (check-equal? (i 'd) #f)

  (void))

;; Test `enum-set-member?`
(let ()
  (define e (make-enumeration '(a b c)))

  (check-true (enum-set-member? 'a e))
  (check-true (enum-set-member? 'b e))
  (check-true (enum-set-member? 'c e))
  (check-false (enum-set-member? 'd e))
  (check-false (enum-set-member? 'e e))

  (void))

;; Test `enum-set-subset?`
(let ()
  (define e1 (make-enumeration '(a b)))
  (define e2 (make-enumeration '(b c)))
  (define e3 (make-enumeration '(a b c)))

  (define c1 (enum-set-constructor e1))
  (define c2 (enum-set-constructor e2))
  (define c3 (enum-set-constructor e3))

  (check-true (enum-set-subset? e1 e1))
  (check-true (enum-set-subset? e2 e2))
  (check-true (enum-set-subset? e3 e3))

  (check-true (enum-set-subset? e1 e3))
  (check-true (enum-set-subset? e2 e3))
  (check-false (enum-set-subset? e3 e1))
  (check-false (enum-set-subset? e3 e2))
  (check-false (enum-set-subset? e1 e2))
  (check-false (enum-set-subset? e2 e1))

  (check-true (enum-set-subset? (c1 '(a)) e1))
  (check-true (enum-set-subset? (c1 '(b)) e1))
  (check-false (enum-set-subset? (c1 '(a)) e2))
  (check-false (enum-set-subset? (c1 '(b)) e2))
  (check-true (enum-set-subset? (c1 '(a)) e3))
  (check-true (enum-set-subset? (c1 '(b)) e3))

  (void))

; Test `enum-set=?`
(let ()
  (define e1 (make-enumeration '(a b)))
  (define e2 (make-enumeration '(b c)))
  (define e3 (make-enumeration '(a b c)))

  (define c1 (enum-set-constructor e1))
  (define c2 (enum-set-constructor e2))
  (define c3 (enum-set-constructor e3))

  (check-true (enum-set=? e1 e1))
  (check-true (enum-set=? e2 e2))
  (check-true (enum-set=? e3 e3))

  (check-false (enum-set=? e1 e3))
  (check-false (enum-set=? e2 e3))
  (check-false (enum-set=? e3 e1))
  (check-false (enum-set=? e3 e2))
  (check-false (enum-set=? e1 e2))
  (check-false (enum-set=? e2 e1))

  (check-false (enum-set=? (c1 '(a)) e1))
  (check-false (enum-set=? (c1 '(b)) e1))
  (check-false (enum-set=? (c1 '(a)) e2))
  (check-false (enum-set=? (c1 '(b)) e2))
  (check-false (enum-set=? (c1 '(a)) e3))
  (check-false (enum-set=? (c1 '(b)) e3))

  (void))

;; Test `enum-set-union`
(let ()
  (define e (make-enumeration '(a b c d e)))
  (define c (enum-set-constructor e))

  (define s1 (c '(a)))
  (define s2 (c '(b)))
  (define s3 (c '(a b)))
  (define s4 (c '(c d e)))

  (check-true (enum-set=? (enum-set-union s1 s1) s1))
  (check-true (enum-set=? (enum-set-union s2 s2) s2))
  (check-true (enum-set=? (enum-set-union s3 s3) s3))
  (check-true (enum-set=? (enum-set-union s4 s4) s4))

  (check-equal? (enum-set->list (enum-set-union s1 s2)) '(a b))
  (check-equal? (enum-set->list (enum-set-union s1 s3)) '(a b))
  (check-equal? (enum-set->list (enum-set-union s1 s4)) '(a c d e))
  (check-equal? (enum-set->list (enum-set-union s2 s3)) '(a b))
  (check-equal? (enum-set->list (enum-set-union s2 s4)) '(b c d e))
  (check-equal? (enum-set->list (enum-set-union s3 s4)) '(a b c d e))

  (void))

;; Test `enum-set-intersect`
(let ()
  (define e (make-enumeration '(a b c d e)))
  (define c (enum-set-constructor e))

  (define s1 (c '(a)))
  (define s2 (c '(b)))
  (define s3 (c '(a b)))
  (define s4 (c '(a b c d e)))

  (check-true (enum-set=? (enum-set-intersect s1 s1) s1))
  (check-true (enum-set=? (enum-set-intersect s2 s2) s2))
  (check-true (enum-set=? (enum-set-intersect s3 s3) s3))
  (check-true (enum-set=? (enum-set-intersect s4 s4) s4))

  (check-equal? (enum-set->list (enum-set-intersect s1 s2)) '())
  (check-equal? (enum-set->list (enum-set-intersect s1 s3)) '(a))
  (check-equal? (enum-set->list (enum-set-intersect s1 s4)) '(a))
  (check-equal? (enum-set->list (enum-set-intersect s2 s3)) '(b))
  (check-equal? (enum-set->list (enum-set-intersect s2 s4)) '(b))
  (check-equal? (enum-set->list (enum-set-intersect s3 s4)) '(a b))

  (void))

;; Test `enum-set-difference`
(let ()
  (define e (make-enumeration '(a b c d e)))
  (define c (enum-set-constructor e))

  (define s1 (c '(a)))
  (define s2 (c '(b)))
  (define s3 (c '(a b)))
  (define s4 (c '(a b c d e)))

  (check-equal? (enum-set->list (enum-set-difference s1 s1)) '())
  (check-equal? (enum-set->list (enum-set-difference s2 s2)) '())
  (check-equal? (enum-set->list (enum-set-difference s3 s3)) '())
  (check-equal? (enum-set->list (enum-set-difference s4 s4)) '())

  (check-equal? (enum-set->list (enum-set-difference s4 s1)) '(b c d e))
  (check-equal? (enum-set->list (enum-set-difference s4 s2)) '(a c d e))
  (check-equal? (enum-set->list (enum-set-difference s4 s3)) '(c d e))
  (check-equal? (enum-set->list (enum-set-difference s3 s1)) '(b))
  (check-equal? (enum-set->list (enum-set-difference s3 s2)) '(a))
  (check-equal? (enum-set->list (enum-set-difference s2 s1)) '(b))

  (void))

;; Test `enum-set-difference`
(let ()
  (define e (make-enumeration '(a b c d e)))
  (define c (enum-set-constructor e))

  (define s0 (c '()))
  (define s1 (c '(a)))
  (define s2 (c '(a b)))
  (define s3 (c '(a b c)))
  (define s4 (c '(a b c d)))
  (define s5 (c '(a b c d e)))

  (check-equal? (enum-set->list (enum-set-complement s0)) '(a b c d e))
  (check-equal? (enum-set->list (enum-set-complement s1)) '(b c d e))
  (check-equal? (enum-set->list (enum-set-complement s2)) '(c d e))
  (check-equal? (enum-set->list (enum-set-complement s3)) '(d e))
  (check-equal? (enum-set->list (enum-set-complement s4)) '(e))
  (check-equal? (enum-set->list (enum-set-complement s5)) '())

  (void))

;; Test `enum-set-projection`
(let ()
  (define e1 (make-enumeration '(a b c d e)))
  (define e2 (make-enumeration '(g f e d c)))
  (define e3 (make-enumeration '(a c e g i k)))

  (check-equal? (enum-set->list (enum-set-projection e1 e2)) '(e d c))
  (check-equal? (enum-set->list (enum-set-projection e2 e1)) '(c d e))
  (check-equal? (enum-set->list (enum-set-projection e1 e3)) '(a c e))
  (check-equal? (enum-set->list (enum-set-projection e2 e3)) '(c e g))

  (void))

;; Test 'define-enumeration'
(let ()
  (define-enumeration color
    (red green blue black)
    color-set)

  (check-equal? (color red) 'red)
  ; (equal? (color yellow) #f) ==> ERROR

  (check-equal? (enum-set->list (color-set)) '())
  (check-equal? (enum-set->list (color-set red green)) '(red green))
  (check-equal? (enum-set->list (color-set red orange yellow green)) '(red green))

  (void))

(when (> num-failed 0)
  (error #f "test failed"))
