;;;
;;; Tests for 'promise'
;;;

(import "../../src/library/base.min")

(define num-failed 0)

(define (check-equal? d0 d1)
  (unless (equal? d0 d1)
    (display "[FAIL] expected ")
    (write d1)
    (display ", received ")
    (write d0)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-true d)
  (unless d
    (display "[FAIL] expected #t")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

(define (check-false d)
  (when d
    (display "[FAIL] expected #f")
    (display ", received ")
    (write d)
    (newline)
    (set! num-failed (+ num-failed 1))))

;; simple promises

(let ()
  (define x (delay 1))
  (check-false (promise-forced? x))
  (check-equal? 1 (force x))
  (check-true (promise-forced? x))
  (check-equal? 1 (force x)))

;; nested promises

(let ()
  (define x (delay (delay 1)))
  (check-false (promise-forced? x))
  (check-true (promise? (force x)))
  (check-true (promise-forced? x))
  (check-false (promise-forced? (force x)))
  (check-equal? (force (force x)) 1)
  (check-true (promise-forced? (force x)))
)

;; lazy promises

(let ()
  (define x (delay (delay 1)))
  (check-false (promise-forced? x))
  (check-true (promise? (force x)))
  (check-true (promise-forced? x))

  (define y (delay (delay 1)))
  (check-false (promise-forced? y))
  (check-false (promise? (lazy y)))
  (check-equal? (lazy y) 1)
  (check-true (promise-forced? y))
)

;; long-running promises

(let ()
  (define x (delay (let loop ([i 1000000]) (if (= i 0) 1 (loop (- i 1))))))
  (check-false (promise-forced? x))
  (check-equal? 1 (force x))
  (check-true (promise-forced? x))
  (check-equal? 1 (force x))
)

(when (> num-failed 0)
  (error #f "test failed"))
