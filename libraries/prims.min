;; Pairs / Lists

(define null? (#%foreign-procedure "null?" (object) object))
(define cons? (#%foreign-procedure "cons?" (object) object))

(define cons (#%foreign-procedure "cons" (object object) object))
(define car (#%foreign-procedure "car" (object) object))
(define cdr (#%foreign-procedure "cdr" (object) object))

(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))

(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))

(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))

(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))

;; Numbers

(define fixnum? (#%foreign-procedure "fx?" (object) object))
(define number? fixnum?)
(define integer? fixnum?)

(define fxneg (#%foreign-procedure "fxneg" (object) object))
(define fx+ (#%foreign-procedure "fx+" (object object) object))
(define fx- (#%foreign-procedure "fx-" (object object) object))
(define fx* (#%foreign-procedure "fx*" (object object) object))
(define fx/ (#%foreign-procedure "fx/" (object object) object))

(define fx= (#%foreign-procedure "fx=" (object object) object))
(define fx< (#%foreign-procedure "fx<" (object object) object))
(define fx> (#%foreign-procedure "fx>" (object object) object))
(define fx<= (#%foreign-procedure "fx<=" (object object) object))
(define fx>= (#%foreign-procedure "fx>=" (object object) object))

;; Ports

(define write (#%foreign-procedure "write" (object) object))
(define newline (#%foreign-procedure "newline" () object))
