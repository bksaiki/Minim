;; Tests for <lib>/private/function.min

;; identity
(equal? 1 (identity 1))

;; negate
(let ()
  (def not-list (negate list?))
  (def not-integer (negate integer?))
  (not-list (vector 1 2))
  (not-integer 5/3))

;; const
(let ()
  (def one-fn (const 1))
  (equal? (one-fn) 1)
  (equal? (one-fn 1) 1)
  (equal? (one-fn 1 2) 1))

;; curry
(let ()
  (def times-2 (curry * 2))
  (def append-one-to-front (curry cons 1))
  (def powc (curry pow))
  (def pow2 (powc 2))
  (def 1ary (f) (lambda (n) (f n)))
  (def 1ary-list (1ary list))

  (equal? (times-2 3) 6)
  (equal? (append-one-to-front (list 2 3)) (list 1 2 3))
  (equal? (pow2 5) 32)
  (equal? (1ary-list 1) '(1)))

;; curryr
(let ()
  (def times-2 (curryr * 2))
  (def append-one-to-back (curryr list 3))
  (def powc (curryr pow))
  (def pow2 (powc 2))

  (equal? (times-2 3) 6)
  (equal? (append-one-to-back 1 2) (list 1 2 3))
  (equal? (pow2 5) 25))
