;;;   
;;; Top-level import for base library
;;;

(import "private/and-or.min"
        "private/cond.min"
        "private/define.min"
        "private/let.min"
        "private/stx.min"
        "private/stx-case.min"
        "private/stx-macro.min"
        "private/template.min"
        "private/when-unless.min")

(define-syntax (foo stx)
  (syntax-case stx ()
    [(_ a) #'a]
    [(_ 1 a) #'(+ 1 a)]
    [(_ a b c ...) #'(quote (+ (* a b c) ...))]))


(foo 1)
(foo 1 a)
(foo 1 2 3 4)


; (define-syntax (mylet stx)
;   (syntax-case stx ()
;     [(_ ([var val] ...) body ...)
;      (list #'(var ...) #'(val ...) #'(body ...))]))

; (define-syntax mywhen
;   (syntax-rules ()
;     ((_ test e1 e2 ...) (if test (begin e1 e2 ...)))))

; (define-syntax myunless
;   (syntax-rules ()
;     ((_ test e1 e2 ...) (when (not test) (begin e1 e2 ...)))))

; (define-syntax with-syntax
;   (lambda (x)
;     (syntax-case x ()
;         ((_ () e1 e2 ...)
;         (syntax (begin e1 e2 ...)))
;         ((_ ((out in)) e1 e2 ...)
;         (syntax (syntax-case in () (out (begin e1 e2 ...)))))
;         ((_ ((out in) ...) e1 e2 ...)
;         (syntax (syntax-case (list in ...) ()
;                     ((out ...) (begin e1 e2 ...))))))))

; (define-syntax do
;    (lambda (orig-x)
;       (syntax-case orig-x ()
;          ((_ ((var init . step) ...) (e0 e1 ...) c ...)
;           (with-syntax (((step ...)
;                          (map (lambda (v s)
;                                  (syntax-case s ()
;                                     (() v)
;                                     ((e) (syntax e))
;                                     (_ (syntax-error orig-x))))
;                               (syntax (var ...))
;                               (syntax (step ...)))))
;              (syntax-case (syntax (e1 ...)) ()
;                 (() (syntax (let do ((var init) ...)
;                                (if (not e0)
;                                    (begin c ... (do step ...))))))
;                 ((e1 e2 ...)
;                  (syntax (let do ((var init) ...)
;                             (if e0
;                                 (begin e1 e2 ...)
;                                 (begin c ... (do step ...))))))))))))

