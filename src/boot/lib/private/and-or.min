;;;   
;;; 'and', 'or'
;;;

(import "stx.min")
(export and or)

(define-syntaxes (and)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'and "bad syntax" stx)
        (let-values ([(e) (stx-cdr stx)])
          (if (stx-null? e)
              (quote-syntax #t)
              (if (if (stx-pair? e)
                      (stx-null? (stx-cdr e))
                      #t)
                  (stx-car e)
                  (datum->syntax
                    (list
                      (quote-syntax if)
                      (stx-car e)
                      (cons (quote-syntax and) (stx-cdr e))
                      (quote-syntax #f)))))))))

(define-syntaxes (or)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'or "bad syntax" stx)
        (let-values ([(e) (stx-cdr stx)])
          (if (stx-null? e)
              (quote-syntax #f)
              (if (if (stx-pair? e)
                      (stx-null? (stx-cdr e))
                      #f)
                  (stx-car e)
                  (let-values ([(tmp) 'or-t])
                    (datum->syntax
                      (list (quote-syntax let-values)
                        (list
                          (list (list tmp) (stx-car e)))
                        (list (quote-syntax if)
                          (quote-syntax or-t)
                          (quote-syntax or-t)
                          (cons (quote-syntax or) (stx-cdr e))))))))))))
