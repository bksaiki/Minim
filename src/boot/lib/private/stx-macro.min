;;;   
;;; 'syntax-rules'
;;;

(import "and-or.min" "stx.min")
(export syntax-rules)

(define-syntaxes (syntax-rules)
  (lambda (stx)
    (if (identifier? stx)
        (syntax-error 'syntax-rules "not allowed as an expression" stx)
        (let ([form (stx-cdr stx)]
              [serr (lambda (msg at)
                      (syntax-error 'syntax-rules msg stx at))])
          (let ([ids (stx-car form)]
                [rules (stx-cdr form)])
            (if (and (stx-list? ids)
                     (andmap identifier? (unwrap ids)))
                (let ([rule?
                       (lambda (r)
                         (and (stx-list? r)
                              (not (stx-null? r))
                              (stx-list? (stx-car r))
                              (let ([t (stx-cdr r)])
                                (and (not (null? t))
                                     (null? (stx-cdr t))))))])
                  (if (and (not (stx-null? rules))
                           (andmap rule? rules))
                      (datum->syntax
                        (list
                          (quote-syntax lambda)
                          (list (quote-syntax stx))
                          (append
                            (list
                              (quote-syntax syntax-case)
                              (quote-syntax stx)
                              ids)
                            (let ([loop
                                (lambda (process rules)
                                  (if (stx-null? rules)
                                      (reverse process)
                                      (let ([rule (stx-car rules)])
                                        (let ([match (stx-car rule)]
                                              [replace (stx-car (stx-cdr rule))])
                                          (loop
                                            (cons
                                              (list
                                                match
                                                  (list
                                                    (quote-syntax syntax)
                                                    replace))
                                              process)
                                            (stx-cdr rules))))))])
                              (loop '() rules)))))
                      (serr "bad syntax" (datum->syntax rules))))
                (serr "expected a list of identifiers" ids)))))))
