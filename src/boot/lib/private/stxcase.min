;;;   
;;; 'syntax-case'
;;;

(import "and-or.min" "cond.min" "define.min" "gen-temp.min"
        "let.min" "stx.min" "template.min" "when-unless.min")
(export syntax-case)

(define-syntax (syntax-case stx)
  (define l (syntax->list stx))
  (unless (and (list? l) (> (length l) 3))
    (syntax-error 'syntax-case "bad syntax" stx))
  (let ([arg (quote-syntax arg)]
        [expr (cadr l)]
        [lits (caddr l)]
        [clauses (cdddr l)])
    (for-each
      (lambda (x)
        (unless (identifier? x)
          (syntax-error
            'syntax-case
            "literal is not an identifier"
            stx
            (syntax-e x))))
      (syntax-e lits))
    (for-each
      (lambda (cl)
        (unless (and (stx-list? cl) (<= 2 (length (syntax->list cl)) 3))
          (syntax-error
            'syntax-case
            "expected a clause with a pattern, optional guard expression, and expression"
            stx
            cl)))
      clauses)
    (let* ([patterns
      (map
        (lambda (cl)
          (let ([cl* (syntax-e cl)])
            (car cl*)))
            clauses)]
          [fenders
      (map
        (lambda (cl)
          (let ([cl* (syntax-e cl)])
            (if (= (length cl*) 2)
                #f
                (cadr cl*))))
            clauses)]
          [results
      (map
        (lambda (cl)
          (let ([cl* (syntax-e cl)])
            (if (= (length cl*) 2)
                (cadr cl*)
                (caddr cl*))))
            clauses)]
          
          [variable?
      (lambda (s)
        (and (identifier? s)
             (let loop ([lits (syntax->list lits)])
               (cond [(null? lits) #t]
                     [(eq? (syntax-e s) (syntax-e (car lits))) #f]
                     [else (loop (cdr lits))]))))]
             
          [get-pattern-vars
      (lambda (pattern0)
        (let loop ([pattern pattern0] [depth 0] [vars null])
          (cond
            [(stx-null? pattern)
             ; empty list
             vars]
            [(stx-pair? pattern)
             ; pair / list
             (define head-pat (stx-car pattern))
             (define tail-pat
                     (let ([tail (stx-cdr pattern)])
                       (if (syntax? tail)
                           tail
                           (datum->syntax tail))))
             (define ellipsis-next?
                     (and (stx-pair? tail-pat)
                          (let ([next (stx-car tail-pat)])
                             (and (identifier? next)
                                  (eq? (syntax-e next) '...)))))
             (cond
               [ellipsis-next?
                (define vars (loop head-pat (+ depth 1) vars))
                (define after-ellipsis
                        (let ([tail (stx-cdr tail-pat)])
                          (if (syntax? tail)
                              tail
                              (datum->syntax tail))))
                (loop after-ellipsis depth vars)]
               [else
                (define vars (loop head-pat depth vars))
                (loop tail-pat depth vars)])]
            [(stx-vector? pattern)
             (define v (syntax-e pattern))
             (define len (vector-length v))
             (let rec ([i 0] [vars vars])
               (cond
                 [(= i len) vars]
                 [else
                  (define ellipsis-next?
                          (and (< (+ i 1) len)
                               (let ([next (vector-ref v (+ i 1))])
                                 (and (identifier? next)
                                      (eq? (syntax-e next) '...)))))
                  (if ellipsis-next?
                      (rec (+ i 2) (loop (vector-ref v i) (+ depth 1) vars))
                      (rec (+ i 1) (loop (vector-ref v i) depth vars)))]))]
            [(and (identifier? pattern)
                  (free-identifier=? pattern (quote-syntax _)))
             ; wildcard
             vars]
            [(variable? pattern)
             ; variable
             (cons (cons (syntax-e pattern) depth) vars)]
            [(not (syntax? (syntax-e pattern)))
             ;; datum
             vars]
            [else
             (error 'syntax-case "improper pattern" stx pattern0)])))]

          [gen-matcher
      (lambda (pattern0)
        (define (stx-_? stx)
          (and (identifier? stx)
               (eq? (syntax-e stx) '_)))

        (define (stx-...? stx)
          (and (identifier? stx)
               (eq? (syntax-e stx) '...)))

        (define (gen-match/expr pattern arg)
          (cond
            [(stx-pair? pattern)
             ; (non-empty) list / improper list
             (define-values (before-ellipsis after-ellipsis ellipsis? prop?)
               (let loop ([pat pattern] [idx-be 0] [idx-ae 0] [ellipsis? #f])
                 (cond
                  [(stx-null? pat)
                   (values idx-be idx-ae ellipsis? #t)]
                  [(stx-pair? pat)
                   (cond
                     [(stx-...? (stx-car pat))
                      (cond
                        [ellipsis?
                         (syntax-error 'syntax-case "ellipsis in pattern follows other ellipsis"
                                       pattern (stx-car pat))]
                        [(= idx-be 0)
                         (syntax-error 'syntax-case "ellipsis in pattern not preceded by a subpattern"
                                       pattern (stx-car pat))]
                        [else
                         (loop (stx-cdr pat) idx-be idx-ae #t)])]
                     [ellipsis?
                      (loop (stx-cdr pat) idx-be (+ idx-ae 1) ellipsis?)]
                     [else
                      (loop (stx-cdr pat) (+ idx-be 1) idx-ae ellipsis?)])]
                  [else
                   (if ellipsis?
                       (values idx-be (+ idx-ae 1) ellipsis? #f)
                       (values (+ idx-be 1) idx-ae ellipsis? #f))])))

             ; case split based on existence and placement of the ellipsis
             (cond
               [(or (not ellipsis?) (= after-ellipsis 0))
                ; no ellipsis / ellipsis at the end
                (let loop ([pat pattern] [idx 0] [arg arg])
                  (cond
                    [(if prop?
                         (= idx before-ellipsis)
                         (= (+ idx 1) before-ellipsis))
                     ; end (tail) of list => 
                     ;  match on empty list (tail)
                     (gen-match/datum (if prop? (quote-syntax ()) pat) arg)]
                    [else
                     (define head-pat (stx-car pat))
                     (define tail-pat
                             (let ([tail (stx-cdr pat)])
                               (if (syntax? tail)
                                   tail
                                   (datum->syntax tail))))
                     (datum->syntax
                       (list
                         (list
                           (quote-syntax lambda)
                           (list (quote-syntax e))
                           (cond
                             [(and ellipsis? (= (+ idx 1) before-ellipsis))
                              (list
                                (quote-syntax if)
                                (list
                                  (quote-syntax stx-list?)
                                  (quote-syntax e))
                                (list
                                  (quote-syntax if)
                                  (list
                                    (quote-syntax stx-null?)
                                    (quote-syntax e))
                                  (let ([n (length (get-pattern-vars head-pat))])
                                    (cons
                                      (quote-syntax list)
                                      (let loop ([i 0] [acc null])
                                        (cond [(>= i n) acc]
                                              [else (loop (+ i 1) (cons 'null acc))]))))
                                  (list
                                    (quote-syntax let)
                                    (list
                                      (list
                                        (quote-syntax tmp)
                                        (list
                                          (quote-syntax map/#f)
                                          (list
                                            (quote-syntax lambda)
                                            (list (quote-syntax e))
                                            (gen-match/expr head-pat (quote-syntax e)))
                                          (list
                                            (quote-syntax stx->list)
                                            (quote-syntax e)))))
                                    (list
                                      (quote-syntax if)
                                      (quote-syntax tmp)
                                      (list
                                        (quote-syntax if)
                                        (list
                                          (quote-syntax null?)
                                          (quote-syntax tmp))
                                        (quote-syntax tmp)
                                        (list
                                          (quote-syntax apply)
                                          (quote-syntax map/#f)
                                          (quote-syntax list)
                                          (quote-syntax tmp)))
                                      #f)))
                                #f)]
                             [(stx-_? head-pat)
                              ; wildcard =>
                              ;  check that list if not empty, then skip head
                              (list
                                (quote-syntax if)
                                (list
                                  (quote-syntax stx-null/#f)
                                  (quote-syntax e))
                                #f
                                (loop tail-pat (+ idx 1)
                                      (datum->syntax
                                        (list
                                          (quote-syntax stx-cdr)
                                          (quote-syntax e)))))]
                             [(variable? head-pat)
                              ; variable =>
                              ;  bind one variable
                              (list
                                (quote-syntax if)
                                (list
                                  (quote-syntax stx-pair?)
                                  (quote-syntax e))
                                (list
                                  (quote-syntax cons/#f)
                                    (list
                                      (quote-syntax stx-car)
                                      (quote-syntax e))
                                    (loop tail-pat (+ idx 1)
                                          (datum->syntax
                                            (list
                                              (quote-syntax stx-cdr)
                                              (quote-syntax e)))))
                                #f)]
                             [(or (stx-pair? head-pat) (stx-vector? head-pat))
                              ; subpattern =>
                              ;  recurse and append
                              (list
                                (quote-syntax if)
                                (list
                                  (quote-syntax stx-pair?)
                                  (quote-syntax e))
                                (list
                                  (quote-syntax append/#f)
                                  (gen-match/expr head-pat
                                                  (datum->syntax
                                                    (list
                                                      (quote-syntax stx-car)
                                                      (quote-syntax e))))
                                  (loop tail-pat (+ idx 1)
                                        (datum->syntax
                                          (list
                                            (quote-syntax stx-cdr)
                                            (quote-syntax e)))))
                                #f)]
                             [else
                              ; datum =>
                              ;  just check if it matches
                              (list
                                (quote-syntax if)
                                (list
                                  (quote-syntax stx-pair?)
                                  (quote-syntax e))
                                (list
                                  (quote-syntax if)
                                  (gen-match/expr head-pat
                                                  (datum->syntax
                                                    (list
                                                      (quote-syntax stx-car)
                                                      (quote-syntax e))))
                                  (loop tail-pat (+ idx 1)
                                        (datum->syntax
                                          (list
                                            (quote-syntax stx-cdr)
                                            (quote-syntax e))))
                                  #f)
                                #f)]))
                         arg))]))]
               [else
                ; ellipsis are not at the end
                ;  just split into two lists:
                ;    (i)  list terminating with ellipsis
                ;    (ii) list after the ellipsis
                (define-values (pre post _) (split-stx-list pattern after-ellipsis prop?))
                (list
                  (quote-syntax let-values)
                  (list
                    (list
                      (list
                        (quote-syntax pre)
                        (quote-syntax post)
                        (quote-syntax ok?))
                      (list
                        (quote-syntax split-stx-list)
                        arg
                        after-ellipsis
                        prop?)))
                  (list
                    (quote-syntax if)
                    (quote-syntax ok?)
                    (list
                      (quote-syntax append/#f)
                      (gen-match/expr (datum->syntax pre)
                                      (quote-syntax pre))
                      (gen-match/expr (datum->syntax post)
                                      (quote-syntax post)))
                    #f))])]
            [(stx-vector? pattern)
             (define v (syntax-e pattern))
             (define len (vector-length v))
             (define-values (before-ellipsis after-ellipsis ellipsis?)
               (let loop ([i 0] [idx-be 0] [idx-ae 0] [ellipsis? #f])
                 (cond
                  [(>= i len)
                   (values idx-be idx-ae ellipsis?)]
                  [(and (< (+ i 1) len)
                        (let ([next (vector-ref v (+ i 1))])
                          (and (identifier? next) (eq? (syntax-e next) '...))))
                   (cond
                     [ellipsis?
                      (syntax-error 'syntax-case "ellipsis in pattern follows other ellipsis"
                                    pattern (stx-car pat))]
                     [(= idx-be 0)
                      (syntax-error 'syntax-case "ellipsis in pattern not preceded by a subpattern"
                                    pattern (stx-car pat))]
                     [else
                      (loop (+ i 2) idx-be idx-ae #t)])]
                  [ellipsis?
                   (loop (+ i 1) idx-be (+ idx-ae 1) ellipsis?)]
                  [else
                   (loop (+ i 1) (+ idx-be 1) idx-ae ellipsis?)])))
             (cond
               [ellipsis?
                (error #f "unimplemented")]
               [else
                (datum->syntax
                  (list
                    (list
                      (quote-syntax lambda)
                      (list (quote-syntax e))
                      (list
                        (quote-syntax if)
                        (list
                          (quote-syntax and)
                          (list
                            (quote-syntax stx-vector?)
                            (quote-syntax e))
                          (list
                            (quote-syntax =)
                            (list
                              (quote-syntax vector-length)
                              (list
                                (quote-syntax syntax-e)
                                (quote-syntax e)))
                            len))
                        (cons
                          (quote-syntax append)
                          (let loop ([i 0])
                            (cond
                              [(= i len) '()]
                              [else
                               (cons
                                 (gen-match/expr (vector-ref v i)
                                                 (datum->syntax
                                                   (list
                                                     (quote-syntax stx-vector-ref)
                                                     (quote-syntax e)
                                                     i)))
                                 (loop (+ i 1)))])))
                        #f))
                    arg))])]
            [else
             (gen-match/datum pattern arg)]))

        (define (gen-match/datum pattern arg)
          (cond
            [(stx-null? pattern)
             ; empty list
             (datum->syntax
               (list
                 (list
                   (quote-syntax lambda)
                   (list (quote-syntax e))
                   (list
                     (quote-syntax stx-null/#f)
                     (quote-syntax e)))
                 arg))]
            [(stx-_? pattern)
             ; wildcard
             (datum->syntax
               (list
                 (list
                   (quote-syntax lambda)
                   (list (quote-syntax e))
                   (quote-syntax null))
                 arg))]
            [(variable? pattern)
             ; variable
             (datum->syntax
               (list
                 (list
                   (quote-syntax lambda)
                   (list (quote-syntax e))
                   (list
                     (quote-syntax list)
                     (quote-syntax e)))
                 arg))]
            [(not (syntax? (syntax-e pattern)))
             ;; datum
             (datum->syntax
               (list
                 (list
                   (quote-syntax lambda)
                   (list (quote-syntax e))
                   (list
                     (quote-syntax if)
                     (list
                       (quote-syntax equal?)
                       (list
                         (quote-syntax quote)
                         (syntax-e pattern))
                       (list
                         (quote-syntax syntax-e)
                         (quote-syntax e)))
                     (quote-syntax null)
                     #f))
                 arg))]
            [else
             (error 'syntax-case "improper pattern" stx pattern0)]))
          
        (gen-match/expr pattern0 arg))])
      
      (datum->syntax
        (list
          (quote-syntax let)
          (list (list arg expr))
          (list
            (quote-syntax unless)
            (list
              (quote-syntax syntax?)
              arg)
            (list
              (quote-syntax error)
              (quote-syntax 'syntax-case)
              (quote-syntax "expected syntax")
              arg))
          (let loop ([patterns patterns]
                     [fenders fenders]
                     [results results])
            (if (null? patterns)
                (list
                  (quote-syntax syntax-error)
                  #f
                  "bad syntax"
                  arg)
        
              (let* ([pattern (car patterns)]
                     [fender (car fenders)]
                     [result (car results)]
                     [pat-vars (reverse (get-pattern-vars pattern))]
                     [matcher (gen-matcher pattern)]
                     [result-stx (quote-syntax rslt)]
                     [temp-vars (map (lambda (t) (gen-temp-id "sc")) pat-vars)])

                (let ([bind-vars
                       (lambda (e)
                         (datum->syntax
                           (list
                             (quote-syntax let)
                             (let loop ([pat-vars pat-vars]
                                        [temp-vars temp-vars]
                                        [result-stx result-stx]
                                        [bindings null])
                               (if (null? pat-vars)
                                   (reverse bindings)
                                   (loop (cdr pat-vars)
                                         (cdr temp-vars)
                                         (datum->syntax
                                           (list
                                             (quote-syntax cdr)
                                             result-stx))
                                         (cons
                                           (list (car temp-vars)
                                                 (list
                                                   (quote-syntax car)
                                                   result-stx))
                                           bindings))))
                             e)))]
                    
                      [gen-syntaxes
                       (lambda (e)
                         (list
                           (quote-syntax let-syntaxes)
                           (map (lambda (pat-var temp-var)
                                  (list
                                    (list (car pat-var))
                                    (list
                                      (quote-syntax make-pattern-variable)
                                      (list
                                        (quote-syntax quote-syntax)
                                        temp-var)
                                      (list
                                        (quote-syntax quote)
                                        (cdr pat-var)))))
                                pat-vars temp-vars)
                           e))])

                  (list
                    (quote-syntax let)
                    (list (list result-stx matcher))
                    (list
                      (quote-syntax if)
                      (if fender
                          (list
                            (quote-syntax and)
                            result-stx
                            (bind-vars
                              (gen-syntaxes
                                (list
                                  (list
                                    (quote-syntax lambda)
                                    (list)
                                    fender)))))
                          result-stx)
                      (bind-vars
                        (gen-syntaxes
                          (list
                            (quote-syntax let-values)
                            (quote-syntax ())
                            result)))

                      (loop (cdr patterns)
                            (cdr fenders)
                            (cdr results)))))))))))))
