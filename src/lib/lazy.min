;;;;;;;;;;;;;;;;;;; lazy list evaluation ;;;;;;;;;;;;;;;;;;;;;;;;;;

;;  A lazy list is a special type of list of the form
;;   ( <val1> . <promise> )
;;                  |
;;              (<val2> . <promise>)
;;                            |
;;                         (<val3> . <promise>)
;;                                     ...

;; lazy cons
(def-syntax lazy-cons
  (syntax-rules ()
   [(_ a b) (cons a (delay b))]))

;; lazy list
(def lazy-list args
  (let loop ([args args])
    (cond [(null? args) '()]
          [else (lazy-cons (car args) (loop (cdr args)))])))

;; lazy car is the same as car
(def lazy-car car)

;; lazy cdr
(def lazy-cdr (ls)
  (force (cdr ls)))

;; lazy map
(def lazy-map (fn . lss)
  (if (member '() lss)
      '()
      (lazy-cons (apply fn (map lazy-car lss))
                 (apply lazy-map fn (map lazy-cdr lss)))))

;; lazy filter
(def lazy-filter (pred ls)
  (if (null? ls)
      '()
      (let ([this (lazy-car ls)])
        (if (pred this)
            (lazy-cons this (lazy-filter pred (lazy-cdr ls)))
            (lazy-filter pred (lazy-cdr ls))))))

;; lazy ref
(def lazy-ref (ls n)
  (if (= n 0)
      (lazy-car ls)
      (lazy-ref (lazy-cdr ls) (- n 1))))
