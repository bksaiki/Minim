;
;   SRFI 9: case-lambda
;

(%import "../private/def.min" "../private/let.min"
         "../private/stx.min" "../private/stx-macro.min"
         "../private/when-unless.min")

(%export case-lambda)

(def-syntax case-lambda
  (lambda (stx)
    (syntax-case stx ()
     [(_ (a e es ...) (a2 e2 e2s ...) ...)
      #'(lambda args
          (let-values ([(l) (length args)])
            (case-lambda/clause args l (a e es ...) (a2 e2 e2s ...) ...)))]
     [(_ cls ...)
      (let loop ([clauses (unwrap #'(cls ...))])
        (unless (null? clauses)
          (let ([clause (car clauses)])
            (syntax-case clause ()
             [((_ ...) _ ...)
              (loop (cdr clauses))]
             [((_ ...) . _)
              (syntax-error 'case-lambda "missing body after formals" stx clause)]
             [_
              (syntax-error 'case-lambda "ill-formed clause" stx clause)]))))]
     [_ (syntax-error 'case-lambda "bad syntax" stx)])))

(def-syntax case-lambda/clause
  (syntax-rules ()
   [(_ args l ((a ...) e ...) clause ...)
    (if (= l (length '(a ...)))
        (apply (lambda (a ...) e ...) args)
        (case-lambda/clause args l clause ...))]
   [(_ args l ((a . rest) e ...) clause ...)
    (case-lambda/improper args l 1 (a . rest) (rest e ...) clause ...)]
   [(_ args l (a e ...) clause ...)
    (let-values ([(a) args]) e ...)]
   [(_ args l)
    (error "arity mismatch: given ~a" l)]))

(def-syntax case-lambda/improper
  (syntax-rules ()
   [(_ args l k al ((a . rest) e ...) clause ...)
    (case-lambda/improper args l (+ k 1) al (rest e ...) clause ...)]
   [(_ args l k al (rest e ...) clause ...)
    (if (>= l k)
        (apply (lambda al e ...) args)
        (case-lambda/clause args l clause ...))]))
