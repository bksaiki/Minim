;
;   'struct'
;

(%import "pre-base.min"
         "string.min"       ; string-append
         "../srfi/9.min")   ; def-record-type

(%export (all "../srfi/9.min")
         def-record)
         
(def-syntax def-record (stx)
  (def bad (msg)
    (syntax-error #f msg stx))

  (def bad2 (msg at)
    (syntax-error #f msg stx at))

  (def make-name xs
    (datum->syntax
      (string->symbol
        (apply string-append
                (map (lambda (p)
                      (if (syntax? p)
                          (symbol->string (unwrap p))
                          p))
                    xs)))))

  (syntax-case stx ()
   [(_ id (fs ...))
    (begin
      (def name #'id)
      (unless (identifier? name)
        (bad2 "identifier?" name))
      (def fields (unwrap #'(fs ...)))
      (unless (andmap identifier? fields)
        (bad2 "list of identifiers?" #'(fs ...)))
      
      (def constructor (make-name "make-" name))
      (def predicate (make-name name "?"))
      (def accessors (map (lambda (f) (make-name name "-" f)) fields))
      (def setters (map (lambda (f) (make-name "set-" name "-" f "!")) fields))
      (datum->syntax
        (append
          (list
            (quote-syntax def-record-type)
            name
            (cons constructor fields)
            predicate)
          (map list fields accessors setters))))]

   [(_ id e) (bad2 "expected a list fields" #'e)]
   [(_ i) (bad "missing fields")]
   [_ (bad "bad syntax")]))
