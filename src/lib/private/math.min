;;;;;;;;;;;;;;;;;;;;;; Predicates ;;;;;;;;;;;;;;;;;;;;;;;;;;

(def exact-nonnegative-integer? (n)
  (and (exact-integer? n) (not (negative? n))))

(def exact-positive-integer? (n)
  (and (exact-integer? n) (positive? n)))

;;;;;;;;;;;;;;;;;; Special math functions ;;;;;;;;;;;;;;;;;;;

(def factorial (n)
  (unless (exact-nonnegative-integer? n)
    (error 'factorial "expected a non-negative integer"))
  (let loop ([n n] [acc 1])
    (if (zero? n)
        acc
        (loop (- n 1) (* n acc)))))

(def fibonacci (n)
  (unless (exact-nonnegative-integer? n)
    (error 'fibonacci "expected a non-negative integer"))
  (let loop ([i 1] [x 1] [y 0])
    (if (> i n)
        x
        (loop (+ i 1) (+ x y) x))))

(def sqr (x)
  (unless (number? x)
    (error 'sqr "expected number"))
  (* x x))

(def sgn (x)
  (unless (number? x)
    (error 'sgn "expected number"))
  (def s
    (cond
     [(negative? x) -1]
     [(positive? x) 1]
     [else          0]))
  (if (exact? x) s (inexact s)))

;; Functional maps

(def add1 (x)
  (unless (number? x)
    (error 'add1 "expected number"))
  (+ x 1))

(def sub1 (x)
  (unless (number? x)
    (error 'sub1 "expected number"))
  (- x 1))
