;
;   'case' syntax
;

(%import "and-or.min" "def.min" "stx.min" "stx-macro.min")

(%export case case-lambda)

(def-syntax case
  (lambda (stx)
    (syntax-case stx (else)
     [(_ v)   ; empty case
      #'(begin v (void))]
     [(_ v [else e es ...])   ; else case
      #'(begin v (begin e es ...))]
     [(_ v [(k ...) e es ...] ...)  ; missing else
      #'(case v [(k ...) e es ...] ... [else (void)])]
     [(_ v [(k ...) e es ...] ... [else x xs ...])  ; general case
      #'(let-values ([(tmp) v])
        (case/else tmp [(k ...) e es ...] ... [else x xs ...]))])))

(def-syntax case/else
  (lambda (stx)
    (syntax-case stx (else)
     [(_ v [(k ...) es ...] [else xs ...])
      #'(if (case/test v (k ...))
            (begin es ...)
            (begin xs ...))]
     [(_ v [(k ...) es ...] rest ... [else xs ...])
      #'(if (case/test v (k ...))
            (begin es ...)
            (case/else v rest ... [else xs ...]))]
     [(_ v [else xs ...])
      #'(begin xs ...)])))

(def-syntax case/test
  (lambda (stx)
    (syntax-case stx ()
     [(_ v ())         #'#f]
     [(_ v (k))        #'(equal? v 'k)]
     [(_ v (k ks ...)) #'(if (equal? v 'k) #t (case/test v (ks ...)))])))


(def-syntax case-lambda
  (syntax-rules ()
   [(_) (syntax-error "missing clauses" stx)]
   [(_ (a e ...) clause ...)
    (lambda args
      (let-values ([(l) (length args)])
        (case-lambda/clause args l (a e ...) clause ...)))]))

(def-syntax case-lambda/clause
  (syntax-rules ()
   [(_ args l ((a ...) e ...) clause ...)
    (if (= l (length '(a ...)))
        (apply (lambda (a ...) e ...) args)
        (case-lambda/clause args l clause ...))]
   [(_ args l ((a . rest) e ...) clause ...)
    (case-lambda/improper args l 1 (a . rest) (rest e ...) clause ...)]
   [(_ args l (a e ...) clause ...)
    (let-values ([(a) args]) e ...)]
   [(_ args l)
    (error "arity mismatch")]))

(def-syntax case-lambda/improper
  (syntax-rules ()
   [(_ args l k al ((a . rest) e ...) clause ...)
    (case-lambda/improper args l (+ k 1) al (rest e ...) clause ...)]
   [(_ args l k al (rest e ...) clause ...)
    (if (>= l k)
        (apply (lambda al e ...) args)
        (case-lambda/clause args l clause ...))]))
   
