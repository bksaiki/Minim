;
;   'for'
;

(%import "and-or.min"
         "def.min"
         "let.min"
         "sequence.min"
         "stx.min"
         "when-unless.min")

(%export for for/list)

;;;;;;;;;;;;;;;;;;;;;;; for loop ;;;;;;;;;;;;;;;;;;;;;;;

(def-syntax for
  (lambda (stx)
    (syntax-case stx ()
     [(_ () body ...) #'(void)]
     [(_ ([id seq]))
      (syntax-error 'for "missing body" stx)]
     [(_ ([id seq] ...) body ...)
      #'(let loop ([id seq] ...)
          (if (or (sequence-empty? id) ...)
              (void)
              (begin
                (let ([id (sequence-first id)] ...)
                  body ...)
                (loop (sequence-rest id) ...))))])))

(def-syntax for/list
  (lambda (stx)
    (syntax-case stx ()
     [(_ () body ...) #'(void)]
     [(_ ([id seq]))
      (syntax-error 'for/list "missing body" stx)]
     [(_ ([id seq] ...) body ...)
      #'(let loop ([accum (list)] [id seq] ...)
          (if (or (sequence-empty? id) ...)
              (reverse accum)
              (loop
                (cons
                  (let ([id (sequence-first id)] ...)
                    body ...)
                  accum)
                (sequence-rest id) ...)))])))
