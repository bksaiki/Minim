;
;   'for'
;

(%import "and-or.min" "stx.min" "when-unless.min")

;;;;;;;;;;;;;;;;;;;;;;; for loop ;;;;;;;;;;;;;;;;;;;;;;;

; for/generic 

(def-syntax for
  (lambda (stx)
    (syntax-case stx ()
     [(_ () body ...) #'(void)]
     [(_ ([id seq]))
      (syntax-error 'for "missing body" stx)]
     [(_ ([id seq] ...) body ...)
      #'(let loop ([id seq] ...)
          (let ([id (sequence-first id)] ...)
            (if (or (sequence-empty? id) ...)
                (void)
                (begin body ...)))
          (loop (sequence-rest id) ...))])))

;;;;;;;;;;;;;;;;;;;;;;; specific sequences ;;;;;;;;;;;;;;;;;;;;;;;

(def in-list (lst)
  (unless (list? lst)
    (error 'in-list "expected a list"))
  (sequence lst
            (lambda (x) (car x))
            (lambda (x) (cdr x))
            (lambda (x) (null? x))))

(%export for
         in-list)
