;
;   'and', 'or'
;

(%import "stx.min")

(def-syntax and
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'and "bad syntax" stx)
        (let ([e (stx-cdr stx)])
          (if (stx-null? e)
              (syntax #t)
              (if (if (stx-pair? e)
                      (stx-null? (stx-cdr e))
                      #t)
                  (stx-car e)
                  (datum->syntax
                    (list
                      (syntax if)
                      (stx-car e)
                      (cons (syntax and) (stx-cdr e))
                      (syntax #f)))))))))

(def-syntax or
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'or "bad syntax" stx)
        (let ([e (stx-cdr stx)])
          (if (stx-null? e)
              (syntax #f)
              (if (if (stx-pair? e)
                      (stx-null? (stx-cdr e))
                      #f)
                  (stx-car e)
                  (datum->syntax
                    (list
                      (syntax if)
                      (stx-car e)
                      (stx-car e)
                      (cons (syntax or) (stx-cdr e))))))))))

(%export and or)
