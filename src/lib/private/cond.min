;
;   'cond'
;

(%import "and-or.min" "stx.min")

(def-syntaxes (cond)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'cond "bad-syntax" stx)
        (let-values ([(e) (stx-cdr stx)]
                     [(serr)
                      (lambda (msg at)
                        (syntax-error 'cond msg stx at))])
          (if (stx-null? e)
              (quote-syntax (void))
              (let-values ([(c) (stx-car e)])
                (if (and (stx-list? c)
                         (not (null? c)))
                    (let-values ([(test) (stx-car c)]
                                 [(then) (stx-cdr c)]
                                 [(else?)
                                  (lambda (i)
                                    (and (identifier? i)
                                         (identifier=? i (quote-syntax else))))])
                      (if (null? then)
                          (serr "missing body" c)
                          (if (else? test)
                              (if (null? (stx-cdr e))
                                  (datum->syntax (cons (quote-syntax begin) then))
                                  (serr "'else' clause must be last" c))
                              (datum->syntax
                                (list
                                  (quote-syntax if)
                                  test
                                  (cons
                                    (quote-syntax begin)
                                    then)
                                  (cons (quote-syntax cond) (stx-cdr e)))))))
                    (serr "missing clause" c))))))))

(def-syntaxes (else)
  (lambda (stx)
    (syntax-error 'else "not allowed as an expression" stx)))

(%export cond else)
