;
;   'def'
;

(%import "stx.min")

(%export def def-syntax)

(def-syntaxes (def-syntax)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'def-syntax "bad syntax" stx)
        (let-values ([(e) (stx-cdr stx)]
                     [(serr serr2)
                      (values
                        (lambda (msg) (syntax-error 'def-syntax msg stx))
                        (lambda (msg at) (syntax-error 'def-syntax msg stx at)))])
          (if (stx-null? e) 
              (serr "bad syntax")
              (let-values ([(id) (stx-car e)]
                           [(r) (stx-cdr e)])
                (if (not (identifier? id))
                    (serr2 "not an identifier" id)
                    (let-values ([(rest) (stx-cdr r)])
                      (if (stx-null? rest)
                          (datum->syntax
                            (list (quote-syntax def-syntaxes)
                              (list id)
                              (stx-car r)))
                          (if (not (stx-list? r))
                              (serr2 "expected a list of arguments" r)
                              (datum->syntax
                                (list (quote-syntax def-syntaxes)
                                  (list id)
                                  (cons
                                    (quote-syntax lambda)
                                    r)))))))))))))
                                

(def-syntaxes (def)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'def "bad syntax" stx)
        (let-values ([(e) (stx-cdr stx)]
                     [(serr)
                      (lambda (msg at)
                        (syntax-error 'def msg stx at))])
          (if (stx-null? e) 
              (syntax-error 'def "bad syntax" stx)
              (let-values ([(r) (stx-cdr e)])
                (if (null? stx)
                    (syntax-error 'def "bad syntax" stx)
                    (let-values ([(id) (stx-car e)])
                      (if (not (identifier? id))
                          (serr "not an identifier" id)
                          (let-values ([(x) (stx-cdr r)])
                            (if (stx-null? x)   ; assignment
                                (datum->syntax
                                  (list
                                    (quote-syntax def-values)
                                    (list id)
                                    (stx-car r)))
                                (datum->syntax
                                  (list
                                    (quote-syntax def-values)
                                    (list id)
                                    (append
                                      (list
                                        (quote-syntax lambda)
                                        (stx-car r))
                                      x))))))))))))))
