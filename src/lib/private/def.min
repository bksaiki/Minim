;
;   'def'
;

(%import "stx.min")

(def-syntaxes (def-syntax)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'def-syntax "bad syntax" stx)
        (let-values ([(e) (stx-cdr stx)]
                     [(serr)
                      (lambda (msg at)
                        (syntax-error 'def-syntax msg stx at))])
          (if (stx-null? e) 
              (syntax-error 'def-syntax "bad syntax" stx)
              (let-values ([(r) (stx-cdr e)])
                (if (null? stx)
                    (syntax-error 'def-syntax "bad syntax" stx)
                    (let-values ([(id) (stx-car e)])
                      (if (not (identifier? id))
                          (serr "not an identifier" id)
                          (let-values ([(x) (stx-cdr r)])
                            (datum->syntax
                              (list
                                (syntax def-syntaxes)
                                (list id)
                                (stx-car r)))))))))))))

(def-syntaxes (def)
  (lambda (stx)
    (if (not (stx-list? stx))
        (syntax-error 'def "bad syntax" stx)
        (let-values ([(e) (stx-cdr stx)]
                     [(serr)
                      (lambda (msg at)
                        (syntax-error 'def msg stx at))])
          (if (stx-null? e) 
              (syntax-error 'def "bad syntax" stx)
              (let-values ([(r) (stx-cdr e)])
                (if (null? stx)
                    (syntax-error 'def "bad syntax" stx)
                    (let-values ([(id) (stx-car e)])
                      (if (not (identifier? id))
                          (serr "not an identifier" id)
                          (let-values ([(x) (stx-cdr r)])
                            (datum->syntax
                              (list
                                (syntax def-values)
                                (list id)
                                (if (stx-null? x)     ; assignment
                                    (stx-car r)
                                    (append
                                      (list
                                        (syntax lambda)
                                        (stx-car r))
                                      x))))))))))))))                       

(%export def def-syntax)
