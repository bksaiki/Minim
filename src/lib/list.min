;;;;;;;;;;;;;;;;;;; Specialized list ;;;;;;;;;;;;;;;;;;;;;;;;;;

(def remove* (vs lst)
  (unless (and (list? vs) (list? lst))
    (error 'remove* "Expected two lists"))
  (def loop (vs lst)
    (if (or (null? vs) (null? lst))
        lst
        (loop (cdr vs) (remove (car vs) lst))))
  (loop vs lst))

(def list* args
  (let ([rev (reverse args)])
    (foldl cons (car rev) (cdr rev))))

;; TODO: check lists
(def append* args
  (let ([rev (reverse args)])
    (foldl append (apply append (car rev)) (cdr rev))))

(def append-map (proc . lsts)
  (apply append (apply map proc lsts)))
