;;;;;;;;;;;;;;;;;;; Functional ;;;;;;;;;;;;;;;;;;;;;;;;;;

(def identity (x) x)

(def negate (f)
  (lambda args (not (apply f args))))

(def const (x) (lambda args x))

(def curry (f . args)
  (def arity (procedure-arity f))
  (def min-arity (if (pair? arity) (car arity) arity))
  (lambda args2
    (let ([args* (append args args2)])
      (if (< (length args*) min-arity)
          (apply curry f args*)
          (apply f args*)))))

(def curryr (f . args)
  (def arity (procedure-arity f))
  (def min-arity (if (pair? arity) (car arity) arity))
  (lambda args2
    (let ([args* (append args2 args)])
      (if (< (length args*) min-arity)
          (apply curry f args*)
          (apply f args*)))))
