;;;
;;;   Expander for syntax macros
;;;   

;; Transforms "xforms" are procedures of one argument that
;; take a syntax object as input and returns a syntax object.
;; Transforms are introduced into scope via `define-syntaxes`
;; in a top-level context and `let-syntaxes` in an
;; expression-level context.
;;
;; This expander stores xforms as an association list mapping
;;  <name> -> (<proc>, <xforms-in-scope>, <eval-env>)
;;

(import "base.min")
(export expand expand/module $base-stx-env merge-xforms)

;;
;;  xforms
;;

(define (lookup-xform maybe-id xforms)
  (and (identifier? maybe-id)
       (let ([entry (assoc (syntax-e maybe-id) xforms)])
         (and entry (cdr entry)))))

(define (merge-xforms new-xforms xforms)
  (let loop ([new-xforms new-xforms] [xforms xforms])
    (cond [(null? new-xforms) xforms]
          [(assoc (caar new-xforms) xforms) (loop (cdr new-xforms) xforms)]
          [else (loop (cdr new-xforms) (cons (car new-xforms) xforms))])))

;;
;;  syntax
;;

; checks if an expression is a syntactic form:
;  <expr> = (<name> . <rest>)
(define ((_-form? form-name) expr)
  (and (stx-pair? expr)
        (let ([head (stx-car expr)])
          (and (identifier? head)
              (eq? (syntax-e head) form-name)))))

(define define-values-form? (_-form? 'define-values))
(define define-syntaxes-form? (_-form? 'define-syntaxes))
(define let-values-form? (_-form? 'let-values))
(define letrec-values-form? (_-form? 'letrec-values))
(define let-syntaxes-form? (_-form? 'let-syntaxes))
(define quote-form? (_-form? 'quote))
(define quote-syntax-form? (_-form? 'quote-syntax))
(define lambda-form? (_-form? 'lambda))
(define begin-form? (_-form? 'begin))
(define if-form? (_-form? 'if))

; syntax would parse into a self-evaluating expression
(define (stx-self-evaluating? stx)
  (define datum (syntax-e stx))
  (or (boolean? datum)
      (number? datum)
      (string? datum)
      (vector? datum)
      (box? datum)
      (char? datum)))

; returns an symbol if it is a duplicate, else false
(define (duplicate-identifier ids new-ids)
  (let loop ([ids ids] [new-ids new-ids])
    (cond [(null? new-ids) #f]
          [else
           (define dup (member (car new-ids) ids))
           (or dup (loop (cons (car new-ids) ids) (cdr new-ids)))])))

; checks if a `define-syntaxes` / `define-values` form is valid
; assumes form is `(<name> . <rest>)
(define (check-define-syntaxes/values-form! name form)
  (define rib0 (stx-cdr form))
  (when (stx-null? rib0)
    (syntax-error name "bad syntax" form))
  (define ids (syntax->list (stx-car rib0)))
  (define rib1 (stx-cdr rib0))
  (unless (and (list? ids) (andmap identifier? ids))
    (syntax-error name "not identifiers" form ids))
  (when (stx-null? rib1)
    (syntax-error name "expected an expression after identifiers" form))
  (define rib2 (stx-cdr rib1))
  (unless (stx-null? rib2)
    (syntax-error name "too many expressions" form)))

; checks if a `let-syntaxes` / `let-values` form is valid
; assumes form is `(<name> . <rest>)
(define (check-let-syntaxes/values-form! name form)
  (define rib (stx-cdr form))
  (when (stx-null? rib)
    (syntax-error name "bad syntax" form))
  (define bindings (syntax->list (stx-car rib)))
  (define bind-rib (stx-cdr rib))
  (when (null? bind-rib)
    (syntax-error name "missing body" form))
  (unless (or (list? bind-rib)
              (and (syntax? bind-rib)
                   (list? (syntax->list bind-rib))))
    (syntax-error name "not a sequence of bindings" form bindings))
  (unless (list? bindings)
    (syntax-error #f "expected a sequence of expressions after the bindings" form))
  (let loop ([bindings bindings])
    (unless (null? bindings)
      (define bind (syntax->list (car bindings)))
      (unless (and (list? bind) (= (length bind) 2))
        (syntax-error #f "expected a sequence of expressions after the bindings" form))
      (define ids (syntax->list (car bind)))
      (unless (and (list? ids) (andmap identifier? ids))
        (syntax-error name "not identifiers" form ids))
      (loop (cdr bindings)))))

; checks if a `lambda` form is valid
; assues form is `(lambda . <rest>)`
(define (check-lambda-form! form)
  (define rib0 (stx-cdr form))
  (when (stx-null? rib0)
    (syntax-error #f "missing formals" form))
  (define formals (stx-car rib0))
  (define rib1 (stx-cdr rib0))
  (when (null? rib1)
    (syntax-error #f "missing expression after formals" form))
  (define rib2 (stx-cdr rib1))
  (unless (or (list? rib2)
              (and (syntax? rib2)
                   (list? (syntax->list rib2))))
    (syntax-error #f "expected a sequence of expressions after formals" form)))

; checks if a `begin` form is valid
; assues form is `(<name> . <rest>)`
(define (check-begin-form! form)
  (unless (syntax->list form)
    (syntax-error 'begin "bad syntax" form)))

; checks if a unary form is valid, i.e. `(<name> <expr>)`.
(define (check-1ary-form! name form)
  (define rib0 (stx-cdr form))
  (when (stx-null? rib0)
    (syntax-error name "expected an expression" form))
  (define rib1 (stx-cdr rib0))
  (unless (stx-null? rib1)
    (syntax-error name "too many expressions" form)))

; checks if an `if` form is valid, i.e. `(if <cond> <if-true> <if-false>)`.
(define (check-if-form! form)
  (define rib (stx-cdr form))
  (when (stx-null? rib)
    (syntax-error 'if "bad syntax" form))
  (define cond-rib (stx-cdr rib))
  (when (stx-null? cond-rib)
    (syntax-error 'if "bad syntax" form))
  (define ift-rib (stx-cdr cond-rib))
  (when (stx-null? ift-rib)
    (syntax-error 'if "missing an \"else\" statement" form))
  (define iff-rib (stx-cdr ift-rib))
  (unless (stx-null? iff-rib)
    (syntax-error name "too many expressions" form)))

; checks for a duplicate identifier, raising an exception if one is encountered
(define (check-duplicate-identifier! form name ids new-ids)
  (define dup (duplicate-identifier ids new-ids))
  (when dup (syntax-error name "duplicate identifier" form dup)))

;;
;;  expander
;;

(define $expander-pattern-vars null)

;; Base environment when expanding modules
(define ($base-stx-env env)
  (let ([env (extend-environment env)])
    (environment-set-variable-value!
      env
      'get-pattern-variable
      (lambda (k)
        (if (symbol? k)
            (letrec-values ([(loop)
                             (lambda (assoc)
                               (if (null? assoc)
                                   #f
                                   (if (eq? (caar assoc) k)
                                       (cadar assoc)
                                       (loop (cdr assoc)))))])
              (loop $expander-pattern-vars))
            (error 'get-pattern-variable
                   "expected symbol?" k))))
    env))

;; Expands a module (List of Expr, List of Xform, Env)
(define (expand/module exprs xforms env)
  ; returns the identifiers of a `define-syntaxes` / `define-values` form
  (define (define-syntaxes/values-identifiers form)
    (map syntax-e (syntax->list (stx-car (stx-cdr form)))))

  ; returns the expr of a `define-syntaxes` / `define-values` form
  (define (define-syntaxes/values-expr form)
    (stx-car (stx-cdr (stx-cdr form))))

  ; evaluates an expression in a given environment
  ; returning potentially multiple values.
  (define (eval/values expr env)
    (call-with-values
      (lambda () (eval expr env))
      (lambda results results)))
  
  ; evaluates an expression in a given environment
  ; returning potentially multiple values.
  (define (eval/xform xform expr name)
    (define fn (car xform))
    (call-with-values
      (lambda () (fn expr))
      (lambda results
        (cond
          [(not (= (length results) 1)) 
           (error #f "result arity mismatch" "expected 1" "received" 2)]
          [(syntax? (car results))
           (car results)]
          [else
           (error name "transformer produced something other than syntax" (car results))]))))

  ; body context (sequence of expressions)
  ; List of Expr, List of Xform -> List of Expr
  (define (expand/body exprs xforms)
    (if (null? exprs)
        (list)
        (let loop ([exprs exprs] [defines '()])
          (define expr* (expand/expr (car exprs) xforms))
          (cond
            [(null? (cdr exprs))
             (cond
               [(or (define-values-form? expr*) (define-syntaxes-form? expr*))
                (error 'begin "last form is not an expression" (car exprs))]
               [(null? defines)
                (list expr*)]
               [else
                (list
                  (datum->syntax
                    (list
                      (quote-syntax letrec-values)
                      (reverse defines)
                      expr*)))])]
            [(begin-form? expr*)
             (loop (append (cdr (syntax->list expr*)) (cdr exprs)) defines)]
            [(define-syntaxes-form? expr*)
             ; this creates a break in the body:
             ; create a `letrec-values` for pending bindings
             ; create `let-syntaxes` for the current macro
             ; call `expand/body` on remaining expressions
             (define form (syntax->list expr*))
             (define ids (cadr form))
             (define value (caddr form))
             (list
               (expand/expr 
                 (datum->syntax
                   (list
                     (quote-syntax letrec-values)
                     (reverse defines)
                     (cons (quote-syntax let-syntaxes)
                       (cons (list (list ids value))
                         (cdr exprs)))))
                 xforms))]
            [(define-values-form? expr*)
             (define form (syntax->list expr*))
             (define ids (cadr form))
             (define value (caddr form))
             (loop (cdr exprs) (cons (list ids value) defines))]
            [else
             (define value
               (datum->syntax
                 (list
                   (quote-syntax let-values)
                   '()
                   expr*
                   (list (quote-syntax values)))))
             (loop (cdr exprs) (cons (list '() value) defines))]))))

  ; expression context
  ; Expr, List of Xform -> Expr
  (define (expand/expr expr xforms)
    (set! $expander-pattern-vars (filter (lambda (e) (pattern-variable? (cadr e))) xforms))
    (let loop ([expr expr])
      (cond
        [(define-values-form? expr)
         (check-define-syntaxes/values-form! 'define-values expr)
         (let ([ids (define-syntaxes/values-identifiers expr)])
           (check-duplicate-identifier! expr 'define-values null ids)
           (let ([form (syntax->list expr)])
             (datum->syntax
               (list
                 (car form)
                 (cadr form)
                 (loop (caddr form))))))]
        [(let-syntaxes-form? expr)
         (check-let-syntaxes/values-form! 'let-syntaxes expr)
         (define form (syntax->list expr))
         (let rec ([bindings (syntax->list (cadr form))] [let-ids null] [xforms xforms])
           (cond
             [(null? bindings)
              (expand/expr  
                (datum->syntax
                  (cons (quote-syntax let-values)
                    (cons (list)
                      (cddr form))))
                xforms)]
             [else
              (define binding (syntax->list (car bindings)))
              (define binding-ids (syntax->datum (car binding)))
              (check-duplicate-identifier! expr 'let-syntaxes let-ids binding-ids)
              (define results
                (let ([rhs (loop (cadr binding))])
                  (eval/values (syntax->datum rhs) env)))
              (if (= (length binding-ids) (length results))
                  (let bind-xforms ([ids binding-ids] [results results] [xforms xforms])
                    (cond
                      [(null? ids)
                       (rec (cdr bindings) (append binding-ids let-ids) xforms)]
                      [else
                       (define id (car ids))
                       (define xform (car results))
                       (cond
                         [(or (procedure? xform) (pattern-variable? xform))
                          (define xform-entry (cons id (list xform xforms)))
                          (bind-xforms (cdr ids) (cdr results) (cons xform-entry xforms))]
                         [else
                          (error 'let-syntaxes "expected a procedure? received" xform)])]))
                  (error 'let-syntaxes "result arity mismatch"
                         "expected" (length ids)
                         "received" (length results)))]))]
        [(or (let-values-form? expr) (letrec-values-form? expr))
         (define name (if (let-values-form? expr) 'let-values 'letrec-values))
         (check-let-syntaxes/values-form! name expr)
         (define form (syntax->list expr))
         (define body (cddr form))
         (datum->syntax
           (cons (car form)
             (cons
               (let rec ([bindings (syntax->list (cadr form))] [let-ids null])
                 (cond
                   [(null? bindings) null]
                   [else
                    (define binding (syntax->list (car bindings)))
                    (define ids (syntax->datum (car binding)))
                    (check-duplicate-identifier! expr name let-ids ids)
                    (cons (list (car binding) (loop (cadr binding)))
                          (rec (cdr bindings) (append ids let-ids)))]))
               (expand/body body xforms))))]
        [(lambda-form? expr)
         (check-lambda-form! expr)
         (define head (stx-car expr))
         (define formals (stx-car (stx-cdr expr)))
         (define body (stx-cdr (stx-cdr expr)))
         (datum->syntax
           (cons head
             (cons formals
               (expand/body body xforms))))]
        [(if-form? expr)
         (check-if-form! expr)
         (define form (syntax->list expr))
         (datum->syntax
           (list
            (car form)
            (loop (cadr form))
            (loop (caddr form))
            (loop (cadddr form))))]
        [(begin-form? expr)
         (check-begin-form! expr)
         (define body (stx-cdr expr))
         (datum->syntax
           (cons
             (stx-car expr)
             (map loop (cdr (syntax->list expr)))))]
        [(quote-form? expr)
         (check-1ary-form! 'quote expr)
         expr]
        [(quote-syntax-form? expr)
         (check-1ary-form! 'quote-syntax expr)
         expr]
        [(stx-pair? expr)
         (define head (stx-car expr))
         (define maybe-xform (lookup-xform head xforms))
         (if maybe-xform
            (expand/expr (eval/xform maybe-xform expr (syntax-e head))
                         (merge-xforms (cadr maybe-xform) xforms))
            (datum->syntax (map loop (syntax->list expr))))]
        [(identifier? expr)
         (define maybe-xform (lookup-xform expr xforms))
         (cond
           [maybe-xform
            (loop (eval/xform maybe-xform expr (syntax-e expr) $module-boot-expander?))]
           [else
             expr])]
        [(stx-self-evaluating? expr)
         expr]
        [else
         (syntax-error 'expand/expr "bad syntax" expr)])))

  ; module context
  ;  `define-values` => defers expansion until all definitions have been processed
  ;  `define-syntaxes` => expands and evaluates RHS and updates `xforms`
  ;  `begin` => splices sequence of expressions
  ;  <expr> => invokes top-level expander
  ; List of Expr, List of Xform -> List of Expr, List of Xform
  (define (expand/module exprs xforms)
    ; Expr, List of Xform -> Expr, List of Xform
    (define (expand/top-level expr xforms)
      (cond
        [(define-syntaxes-form? expr) (values expr xforms)]
        [(define-values-form? expr) (values expr xforms)]
        [(begin-form? expr) (values expr xforms)]
        [(and (stx-pair? expr) (identifier? (stx-car expr)))
         (define head (stx-car expr))
         (define maybe-xform (lookup-xform head xforms))
         (cond
           [maybe-xform
            (expand/top-level
              (eval/xform maybe-xform expr (syntax-e head))
              (merge-xforms (cadr maybe-xform) xforms))]
           [else
            (values expr xforms)])]
        [else (values expr xforms)]))

    ; List of Expr, List of Xform -> List of Expr, List of Xform
    (define (expand/non-define-values exprs xforms)
      ; mutatable state
      (define xforms xforms)
      (define define-ids null)
      (define xform-ids null)
      ; for each expression
      (define exprs*
        (let loop ([exprs exprs])
          (cond
            [(null? exprs) null]
            [else
             (let with-scope ([exprs exprs] [in-scope xforms])
               (define-values (expr in-scope) (expand/top-level (car exprs) in-scope))
               (cond
                 [(define-syntaxes-form? expr)
                  (check-define-syntaxes/values-form! 'define-syntaxes expr)
                  (define-values (ids rhs)
                    (let ([ids (define-syntaxes/values-identifiers expr)])
                      (check-duplicate-identifier! expr 'define-syntaxes xform-ids ids)
                      (values ids (define-syntaxes/values-expr expr))))
                  (define results
                    (let ([rhs* (expand/expr rhs in-scope)])
                      (eval/values (syntax->datum rhs*) env)))
                  (if (= (length ids) (length results))
                      (let rec ([ids ids] [results results])
                        (cond
                          [(null? ids) (loop (cdr exprs))]
                          [else
                           (define id (car ids))
                           (define xform (car results))
                           (cond
                             [(procedure? xform)
                              (define binding (cons id (list xform null)))
                              (set! xform-ids (cons id xform-ids))
                              (set! xforms
                                (let ([xforms-in-scope (cons binding xforms)])
                                  (let loop ([xforms xforms-in-scope])
                                    (cond
                                      [(null? xforms) null]
                                      [else
                                       (cons
                                         (if (member (caar xforms) xform-ids)
                                             (cons (caar xforms) (list (cadar xforms) xforms-in-scope))
                                             (car xforms))
                                         (loop (cdr xforms)))]))))
                              (rec (cdr ids) (cdr results))]
                             [else
                              (error 'define-syntaxes
                                     "expected a procedure? received"
                                     xform)])]))
                      (error 'define-syntaxes "result arity mismatch" "expected"
                             (length ids) "received" (length results)))]
                 [(define-values-form? expr)
                  (check-define-syntaxes/values-form! 'define-values expr)
                  (define ids (define-syntaxes/values-identifiers expr))
                  (check-duplicate-identifier! expr 'define-values define-ids ids)
                  (set! define-ids (append ids define-ids))
                  (cons expr (loop (cdr exprs)))]
                 [(begin-form? expr)
                  (check-begin-form! expr)
                  (define forms (cdr (syntax->list expr)))
                  (if (null? forms)
                      (loop (cdr exprs))
                      (append (with-scope forms in-scope) (loop (cdr exprs))))]
                 [else
                  (cons (expand/expr expr in-scope) (loop (cdr exprs)))]))])))
      ; done
      (values exprs* xforms))
    
    ; Any `define-values` form is deferred
    ; List of Expr, List of Xform -> List of Expr
    (define (expand/define-values exprs xforms)
      (let loop ([exprs exprs] [exprs* null])
        (cond
          [(null? exprs) (reverse exprs*)]
          [(define-values-form? (car exprs))
           (define form (syntax->list (car exprs)))
           (loop (cdr exprs)
                 (cons
                   (datum->syntax
                     (list
                       (car form)
                       (cadr form)
                       (expand/expr (caddr form) xforms)))
                   exprs*))]
          [else (loop (cdr exprs) (cons (car exprs) exprs*))])))

    (define-values (exprs* xforms*) (expand/non-define-values exprs xforms))
    (define exprs** (expand/define-values exprs* xforms*))
    (values exprs** xforms*))

  ; invoke the module-level expander
  (expand/module exprs xforms))

;; Expands a single expression
(define (expand expr xforms env)
  (define-values (exprs* xforms*) (expand/module (list expr) xforms env))
  (cond [(null? exprs*) (values (quote-syntax (void)) xforms*)]
        [else (values (car exprs*) xforms*)]))
