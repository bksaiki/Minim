;;;
;;; x86-64 specific definitions
;;;

(import "../base.min" "common.min")
(export assemble/x86-64)

(define (translate-register reg)
  (case reg
    [(CC-REG)   'rbp]
    [(SP-REG)   'rsp]
    [(ENV-REG)  'rdi]
    [(SS-REG)   'r12]
    [(RES-REG)  'rax]
    [(T0-REG)   'r10]
    [(T1-REG)   'r11]
    [else       (error 'translate-register "unknown register" reg)]))

(define (assemble/x86-64 instrs)
  (let loop ([instrs instrs] [sequences '()])
    (cond
      [(null? instrs)
       (reverse sequences)]
      [(eq? (first (first instrs)) 'label)
       ; TODO
       (loop (cdr instrs) sequences)]
      [else
       (define instr (first instrs))
       (define seq
         (cond
           [(eq? (first instr) 'load-literal)
            (void)]
           [(eq? (first instr) 'return)
            ; 198
            (void)]
           [else (error 'assemble/x86-64 "unimplemented" instr)]))
       (loop (cdr instrs) (cons seq sequences))])))
