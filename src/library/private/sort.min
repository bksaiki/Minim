;;
;;  List sorting
;;  http://groups.umd.umich.edu/cis/course.des/cis400/scheme/sorts.html
;;

(import "pre-base.min")
(export sort)

;; TODO: implement quotient
(define (quotient x y) (/ x y))

;;; (merge! a b less?)
;;; takes two sorted lists a and b and smashes their cdr fields to form a
;;; single sorted list including the elements of both.
;;; Note:  this does _not_ accept vectors.

(define (merge! a b less?)
  (define (loop r a b)
    (if (less? (car b) (car a))
        (begin
          (set-cdr! r b)
          (if (null? (cdr b))
              (set-cdr! b a)
              (loop b a (cdr b))))
        ;; (car a) <= (car b)
        (begin
          (set-cdr! r a)
          (if (null? (cdr a))
              (set-cdr! a b)
              (loop a (cdr a) b)))))
  (cond
    [(null? a) b]
    [(null? b) a]
    [(less? (car b) (car a))
     (if (null? (cdr b))
         (set-cdr! b a)
         (loop b a (cdr b)))
     b]
    [else ; (car a) <= (car b)
     (if (null? (cdr a))
         (set-cdr! a b)
        (loop a (cdr a) b))
     a]))



;;; (sort! sequence less?)
;;; sorts the list or vector sequence destructively.  It uses a version
;;; of merge-sort invented, to the best of my knowledge, by David H. D.
;;; Warren, and first used in the DEC-10 Prolog system.  R. A. O'Keefe
;;; adapted it to work destructively in Scheme.

(define (sort! seq less?)
  (define (step n)
    (cond
      [(> n 2)
       (define j (quotient n 2))
       (define a (step j))
       (define k (- n j))
       (define b (step k))
       (merge! a b less?)]
      [(= n 2)
       (define x (car seq))
       (define y (cadr seq))
       (define p seq)
       (set! seq (cddr seq))
       (when (less? y x)
         (set-car! p y)
         (set-car! (cdr p) x))
       (set-cdr! (cdr p) '())
       p]
      [(= n 1)
       (define p seq)
       (set! seq (cdr seq))
       (set-cdr! p '())
       p]
      [else
       '()]))
  (if (vector? seq)
      (let ([n (vector-length seq)]
            [vector seq])                   ; save original vector
        (set! seq (vector->list seq))       ; convert to list
        (do ([p (step n) (cdr p)]           ; sort list destructively
             [i 0 (+ i 1)])                 ; and store elements back
            ((null? p) vector)              ; in original vector
          (vector-set! vector i (car p))))
      ;; otherwise, assume it is a list
      (step (length seq))))

;;; (sort sequence less?)
;;; sorts a vector or list non-destructively.
;;; It does this by sorting a copy of the sequence
(define (sort seq less?)
  (if (vector? seq)
      (list->vector (sort! (vector->list seq) less?))
      (sort! (append seq '()) less?)))
