;;;   
;;; Paths
;;;

(import "pre-base.min" "string.min")

(export is-absolute-path?
        build-path
        split-path
        path->list)

(define (is-absolute-path? path)
  (and (> (string-length path) 0)
       (eq? (string-ref path 0) #\/)))

; paths are unverified
(define (build-path base . subpaths)
  (define (string-terminates-with-/? str)
    (define len (string-length str))
    (eq? (string-ref str (- len 1)) #\/))
  (define paths
    (let loop ([paths subpaths] [accum (list base)])
      (cond
        [(null? paths) (reverse accum)]
        [(= (string-length (car paths)) 0) (loop (cdr paths) accum)]
        [(string-terminates-with-/? (car accum)) (loop (cdr paths) (cons (car paths) accum))]
        [else (loop (cdr paths) (cons (car paths) (cons "/" accum)))])))
  (apply string-append paths))

(define (split-path path)
  (unless (string? path)
    (raise-argument-error 'split-path "string?" path))
  (define path-elems (reverse (path->list path)))
  (cond
    [(pair? (cdr path-elems))
     (define end (car path-elems))
     (define rest (cdr path-elems))
     (cons (apply build-path (reverse rest)) end)]
    [else
     (cons #f (car path-elems))]))

(define (path->list path)
  (unless (string? path)
    (raise-argument-error 'path->list "string?" path))
  (let loop ([path path] [accum '()])
    (cond
      [(= (string-length path) 0)
       (reverse accum)]
      [else
       (define len (string-length path))
       (let loop2 ([i 0])
         (cond
           [(= i len)
            (loop "" (cons path accum))]
           [(eq? (string-ref path i) #\/)
            (cond
              [(= i 0)
               ; corner case for unix paths
               (loop (substring path 1 len) (cons "/" accum))]
              [else
               (define elem (substring path 0 i))
               (define rest (substring path (+ i 1) len))
               (loop rest (cons elem accum))])]
           [else
            (loop2 (+ i 1))]))])))
