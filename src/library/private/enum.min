;;;
;;; Enumeration
;;;

(import "pre-base.min" "list.min" "record.min" "set.min" "gen-temp.min")

(export define-enumeration
        make-enumeration
        enum-set?
        enum-set->list
        enum-set-universe
        enum-set-constructor
        enum-set-indexer
        enum-set-member?
        enum-set-subset?
        enum-set=?
        enum-set-union
        enum-set-intersect
        enum-set-difference
        enum-set-complement
        enum-set-projection)

;; --------------------------------------------------------
;; Type

(define-record-type enum-set-type
  (opaque #t)
  (sealed #t)
  (fields
    universe      ; list?
    universe-set  ; set?
  )
  (protocol
    (lambda (p)
      (lambda (univ)
        (p univ (apply make-set univ))))))

;; The `id` field is to prevent any two
;; enum-set-types from being comparable
(define-record-type enum-set
  (opaque #t)
  (sealed #t)
  (fields
    enum-type   ; record?
    vals        ; list?
    val-set     ; set?
  )
  (protocol
    (lambda (p)
      (lambda (enum-type vals)
        (p enum-type vals (apply make-set vals))))))

;; --------------------------------------------------------
;; Exceptions

(define (non-symbol-error who v)
  (raise-argument-error who "symbol?" v))

(define (non-enum-set-error who v)
  (raise-argument-error who "enum-set?" v))

;; --------------------------------------------------------
;; Procedural layer

(define (make-enumeration xs)
  (for-each
    (lambda (x)
      (unless (symbol? x)
        (non-symbol-error 'make-enumeration x)))
    xs)
  (define enum-type (make-enum-set-type xs))
  (make-enum-set enum-type xs))

(define (enum-set->list enum-set)
  (unless (enum-set? enum-set)
    (non-enum-set-error 'enum-set->list enum-set))
  (enum-set-vals enum-set))

(define (enum-set-universe enum-set)
  (unless (enum-set? enum-set)
    (non-enum-set-error 'enum-set-universe enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (make-enum-set enum-type (enum-set-type-universe enum-type)))

(define (enum-set-constructor enum-set)
  (unless (enum-set? enum-set)
    (non-enum-set-error 'enum-set-constructor enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (define universe (enum-set-type-universe enum-type))
  (lambda (xs)
    (for-each (lambda (x)
                (unless (symbol? x)
                  (non-symbol-error 'enum-set-constructor x)))
              xs)
    (define xs* (apply make-set xs))
    (make-enum-set
      enum-type
      (let loop ([ys universe] [in-xs '()])
        (cond
          [(null? ys) (reverse in-xs)]
          [(set-member? xs* (car ys)) (loop (cdr ys) (cons (car ys) in-xs))]
          [else (loop (cdr ys) in-xs)])))))

(define (enum-set-indexer enum-set)
  (unless (enum-set? enum-set)
    (non-enum-set-error 'enum-set-indexer enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (define universe (enum-set-type-universe enum-type))
  (lambda (x)
    (unless (symbol? x)
      (non-symbol-error 'enum-set-indexer x))
    (index-of x universe)))

(define ($enum-set-member? x enum-set)
  (set-member? (enum-set-val-set enum-set) x))

(define (enum-set-member? x enum-set)
  (unless (enum-set? enum-set)
    (non-enum-set-error 'enum-set-member? enum-set))
  ($enum-set-member? x enum-set))

(define (list-subset? l1 l2)
  (subset? (apply make-set l1) (apply make-set l2)))

(define ($enum-set-subset? e1 e2)
  (define t1 (enum-set-enum-type e1))
  (define t2 (enum-set-enum-type e2))
  (and (subset? (enum-set-type-universe-set t1) (enum-set-type-universe-set t2))
       (subset? (enum-set-val-set e1) (enum-set-val-set e2))))

(define (enum-set-subset? e1 e2)
  (unless (enum-set? e1)
    (non-enum-set-error 'enum-set-subset? e1))
  (unless (enum-set? e2)
    (non-enum-set-error 'enum-set-subset? e2))
  ($enum-set-subset? e1 e2))

(define (enum-set=? e1 e2)
  (unless (enum-set? e1)
    (non-enum-set-error 'enum-set=? e1))
  (unless (enum-set? e2)
    (non-enum-set-error 'enum-set=? e2))
  (and ($enum-set-subset? e1 e2) ($enum-set-subset? e2 e1)))

(define (enum-set-merger name member?)
  (lambda (e1 e2)
    (unless (enum-set? e1)
      (non-enum-set-error name e1))
    (unless (enum-set? e2)
      (non-enum-set-error name e2))
    (unless (eq? (enum-set-enum-type e1) (enum-set-enum-type e2))
      (error name "unioning enum sets of different types" e1 e2))
    (define enum-type (enum-set-enum-type e1))
    (define vs1 (enum-set-val-set e1))
    (define vs2 (enum-set-val-set e2))
    (make-enum-set enum-type (filter (member? vs1 vs2) (enum-set-type-universe enum-type)))))

(define-values (enum-set-union enum-set-intersect enum-set-difference)
  (values (enum-set-merger 'enum-set-union
            (lambda (s1 s2)
              (lambda (x)
                (or (set-member? s1 x) (set-member? s2 x)))))
          (enum-set-merger 'enum-set-intersect
            (lambda (s1 s2)
              (lambda (x)
                (and (set-member? s1 x) (set-member? s2 x)))))
          (enum-set-merger 'enum-set-difference
            (lambda (s1 s2)
              (lambda (x)
                (and (set-member? s1 x) (not (set-member? s2 x))))))))

(define (enum-set-complement enum-set)
  (unless (enum-set? enum-set)
    (non-enum-set-error 'enum-set-complement enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (define vs (enum-set-val-set enum-set))
  (make-enum-set enum-type
    (filter (lambda (x) (not (set-member? vs x)))
            (enum-set-type-universe enum-type))))

(define (enum-set-projection e1 e2)
  (unless (enum-set? e1)
    (non-enum-set-error 'enum-set-projection e1))
  (unless (enum-set? e2)
    (non-enum-set-error 'enum-set-projection e2))
  (define universe (enum-set-type-universe-set (enum-set-enum-type e2)))
  (define constructor (enum-set-constructor e2))
  (constructor
    (filter (lambda (x) (set-member? universe x))
            (enum-set-vals e1))))

;;
;;  Macros
;;

(define-syntax (define-enumeration stx)
  (syntax-case stx ()
    [(_ name (values ...) constructor)
     (if (identifier? #'name)
         (let ([ids (syntax->list #'(values ...))])
           (for-each (lambda (id)
                       (unless (identifier? id)
                         (raise-syntax-error 'define-enumeration "expected an identifier" stx id)))
                     ids)
           (unless (identifier? #'constructor)
             (raise-syntax-error 'define-enumeration "expected an identifier" stx #'constructor))
           (with-syntax ([(elts ...) (list 'elts '...)]
                         [id (gen-temp-id (symbol->string (syntax->datum #'name)))])
             #'(begin
                 (define id (make-enumeration '(values ...)))
                 (define-syntax (constructor stx)
                   (syntax-case stx ()
                     [(_ elts ...)
                      #'((enum-set-constructor id) '(elts ...))]
                     [(_ . _)
                      (raise-syntax-error 'constructor "bad syntax" stx)]))
                 (define-syntax (name stx)
                   (syntax-case stx ()
                     [(_ elt)
                      (if (identifier? #'elt)
                          (if (member (syntax->datum #'elt) '(values ...))
                              #''elt
                              (raise-syntax-error 'name "identifier not in universe" stx #'elt))
                          (raise-syntax-error 'name "expected an identifier" stx #'elt))]
                     [(_ . _)
                      (raise-syntax-error 'name "bad syntax" stx)])))))
         (raise-syntax-error 'define-enumeration "expected an identifier" #'name))]
    [(_ name value-spec constructor _ ...)
     (raise-syntax-error 'define-enumeration "bad syntax" stx)]
    [(_ name value-spec)
     (raise-syntax-error 'define-enumeration "missing constructor name" stx)]
    [(_ name)
     (raise-syntax-error 'define-enumeration "missing enumeration values and constructor name" stx)]
    [(_ . _)
     (raise-syntax-error 'define-enumeration "bad syntax" stx)]))
