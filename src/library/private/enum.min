;;;
;;; Enumeration
;;;

(import "pre-base.min" "list.min" "record.min" "set.min")
(export make-enumeration
        enum-set?
        enum-set->list
        enum-set-universe
        enum-set-constructor
        enum-set-indexer
        enum-set-member?
        enum-set-subset?
        enum-set=?
        enum-set-union
        enum-set-intersect
        enum-set-difference)

;;
;;  Type definition
;;

(define-record-type enum-set-type
  (opaque #t)
  (sealed #t)
  (fields
    id            ; record?
    universe      ; list?
    universe-set  ; set?
  )
  (protocol
    (lambda (p)
      (lambda (univ)
        (define-record-type id)
        (p id univ (apply make-set univ))))))

;; The `id` field is to prevent any two
;; enum-set-types from being comparable
(define-record-type enum-set
  (opaque #t)
  (sealed #t)
  (fields
    id          ; record?
    enum-type   ; record?
    vals        ; list?
    val-set     ; set?
  )
  (protocol
    (lambda (p)
      (lambda (enum-type vals)
        (define-record-type set-id)
        (p set-id enum-type vals (apply make-set vals))))))

(define (make-enumeration xs)
  (for-each (lambda (x)
              (unless (symbol? x)
                (error 'make-enumeration "expected a symbol?" x)))
            xs)
  (define enum-type (make-enum-set-type xs))
  (make-enum-set enum-type xs))

;;
;;  Procedures
;;

(define (enum-set->list enum-set)
  (enum-set-vals enum-set))

(define (enum-set-universe enum-set)
  (unless (enum-set? enum-set)
    (error 'enum-set-universe "expected an enum-set?" enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (make-enum-set enum-type (enum-set-type-universe enum-type)))

(define (enum-set-constructor enum-set)
  (unless (enum-set? enum-set)
    (error 'enum-set-constructor "expected an enum-set?" enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (define universe (enum-set-type-universe enum-type))
  (lambda (xs)
    (for-each (lambda (x)
                (unless (symbol? x)
                  (error 'enum-set-constructor "expected a symbol?" x)))
              xs)
    (define xs* (apply make-set xs))
    (make-enum-set
      enum-type
      (let loop ([ys universe] [in-xs '()])
        (cond
          [(null? ys) (reverse in-xs)]
          [(set-member? xs* (car ys)) (loop (cdr ys) (cons (car ys) in-xs))]
          [else (loop (cdr ys) in-xs)])))))

(define (enum-set-indexer enum-set)
  (unless (enum-set? enum-set)
    (error 'enum-set-indexer "expected an enum-set?" enum-set))
  (define enum-type (enum-set-enum-type enum-set))
  (define universe (enum-set-type-universe enum-type))
  (lambda (x)
    (unless (symbol? x)
      (error 'enum-set-indexer "expected a symbol?" x))
    (index-of x universe)))

(define ($enum-set-member? x enum-set)
  (set-member? (enum-set-val-set enum-set) x))

(define (enum-set-member? x enum-set)
  (unless (enum-set? enum-set)
    (error 'enum-set-member? "expected an enum-set?" enum-set))
  ($enum-set-member? x enum-set))

(define (list-subset? l1 l2)
  (subset? (apply make-set l1) (apply make-set l2)))

(define ($enum-set-subset? e1 e2)
  (define t1 (enum-set-enum-type e1))
  (define t2 (enum-set-enum-type e2))
  (and (subset? (enum-set-type-universe-set t1) (enum-set-type-universe-set t2))
       (subset? (enum-set-val-set e1) (enum-set-val-set e2))))

(define (enum-set-subset? e1 e2)
  (unless (enum-set? e1)
    (error 'enum-subset? "expected an enum-set?" e1))
  (unless (enum-set? e2)
    (error 'enum-subset? "expected an enum-set?" e2))
  ($enum-set-subset? e1 e2))

(define (enum-set=? e1 e2)
  (unless (enum-set? e1)
    (error 'enum-subset? "expected an enum-set?" e1))
  (unless (enum-set? e2)
    (error 'enum-set=? "expected an enum-set?" e2))
  (and ($enum-set-subset? e1 e2) ($enum-set-subset? e2 e1)))

(define (enum-set-merger name member?)
  (lambda (e1 e2)
    (unless (enum-set? e1)
      (error name "expected an enum-set?" e1))
    (unless (enum-set? e2)
      (error name "expected an enum-set?" e2))
    (unless (eq? (enum-set-enum-type e1) (enum-set-enum-type e2))
      (error name "unioning enum sets of different types" e1 e2))
    (define enum-type (enum-set-enum-type e1))
    (define vs1 (enum-set-val-set e1))
    (define vs2 (enum-set-val-set e2))
    (make-enum-set enum-type (filter (member? vs1 vs2) (enum-set-type-universe enum-type)))))

(define-values (enum-set-union enum-set-intersect enum-set-difference)
  (values (enum-set-merger 'enum-set-union
            (lambda (s1 s2)
              (lambda (x)
                (or (set-member? s1 x) (set-member? s2 x)))))
          (enum-set-merger 'enum-set-intersect
            (lambda (s1 s2)
              (lambda (x)
                (and (set-member? s1 x) (set-member? s2 x)))))
          (enum-set-merger 'enum-set-difference
            (lambda (s1 s2)
              (lambda (x)
                (and (set-member? s1 x) (not (set-member? s2 x))))))))
