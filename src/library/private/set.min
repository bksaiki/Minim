;;;
;;; Sets
;;;

(import "pre-base.min"
        "record.min")

(export make-set
        set?
        set-member?
        set-copy
        set-empty?
        set-count
        set->list

        subset?
        proper-subset?
        set=?

        set-add!
        set-remove!
        set-clear!

        set-map
        set-for-each

        set-union
        set-intersect
        set-subtract
        set-symmetric-difference)

;;
;;  Definition
;;

(define-record-type set
  (opaque #t)
  (sealed #t)
  (fields store)
  (protocol
    (lambda (p)
      (lambda xs
        (define h (make-hashtable))
        (for-each (lambda (x) (hashtable-set! h x #f)) xs)
        (p h))))
  (methods gen:equal+hash
    (lambda (a b rec-equal?)
      (rec-equal? (set-store a) (set-store b)))
    (lambda (a rec-hash)
      (+ (rec-hash (set-store a)) 401235121)))
  (methods gen:custom-write
    (lambda (s port mode)
      (fprintf port "#<set ~s>" (vector->list (hashtable-keys (set-store s)))))))

;;
;;  Basic operations
;;

(define (not-set-error who v)
  (raise-argument-error who "set?" v))

(define (set-member? st v)
  (unless (set? st)
    (not-set-error 'set-member? st))
  (hashtable-contains? (set-store st) v))

(define (set-empty? st)
  (unless (set? st)
    (not-set-error 'set-empty? st))
  (= (hashtable-size (set-store st)) 0))

(define (set-count st)
  (unless (set? st)
    (not-set-error 'set-count st))
  (hashtable-size (set-store st)))

(define (set-copy st)
  (unless (set? st)
    (not-set-error 'set-copy st))
  (define cp (make-set))
  (for-each (lambda (x) (set-add! cp x)) (set->list st))
  cp)

(define (set-add! st v)
  (unless (set? st)
    (not-set-error 'set-add! st))
  (hashtable-set! (set-store st) v #f))

(define (set-remove! st v)
  (unless (set? st)
    (not-set-error 'set-remove! st))
  (hashtable-delete! (set-store st) v))

(define (set-clear! st)
  (unless (set? st)
    (not-set-error 'set-clear! st))
  (hashtable-clear! (set-store st)))

(define (set->list st)
  (unless (set? st)
    (not-set-error 'set->list st))
  (vector->list (hashtable-keys (set-store st))))

;;
;;  Set comparison
;;

(define (subset? st st2)
  (unless (set? st)
    (not-set-error 'subset? st))
  (unless (set? st2)
    (not-set-error 'subset? st2))
  (let loop ([elts (set->list st)])
    (cond
      [(null? elts) #t]
      [(set-member? st2 (car elts)) (loop (cdr elts))]
      [else #f])))

(define (proper-subset? st st2)
  (unless (set? st)
    (not-set-error 'proper-subset? st))
  (unless (set? st2)
    (not-set-error 'proper-subset? st2))
  (and (subset? st st2) (not (subset? st2 st))))

(define (set=? st st2)
  (unless (set? st)
    (not-set-error 'set=? st))
  (unless (set? st2)
    (not-set-error 'set=? st2))
  (and (subset? st st2) (subset? st2 st)))

;;
;;  Set iteration
;;

(define (set-map proc st)
  (unless (set? st)
    (not-set-error 'set-map st))
  (map proc (set->list st)))

(define (set-for-each proc st)
  (unless (set? st)
    (not-set-error 'set-for-each st))
  (for-each proc (set->list st)))

;;
;;  Set/Set operations
;;

(define (set-union . ss)
  (for-each
    (lambda (s)
      (unless (set? s)
        (not-set-error 'set-union s)))
    ss)
  (cond
    [(null? ss)
     (make-set)]
    [(null? (cdr ss))
     (define s (car ss))
     (define c (make-set))
     (for-each (lambda (x) (set-add! c x)) (set->list s))
     c]
    [else
     (define u (make-set))
     (for-each
       (lambda (s)
         (for-each
           (lambda (x) (set-add! u x))
           (set->list s)))
       ss)
     u]))

(define (set-intersect . ss)
  (for-each
    (lambda (s)
      (unless (set? s)
        (not-set-error 'set-intersect s)))
    ss)
  (cond
    [(null? ss)
     (make-set)]
    [(null? (cdr ss))
     (define s (car ss))
     (define c (make-set))
     (for-each (lambda (x) (set-add! c x)) (set->list s))
     c]
    [else
     (define s (car ss))
     (define i (make-set))
     (for-each (lambda (x) (set-add! i x)) (set->list s))
     (let loop ([ss (cdr ss)] [i i])
       (cond
         [(null? ss) i]
         [(= (set-count i) 0) i]
         [else
          (define s (car ss))
          (define i* (make-set))
          (for-each (lambda (x)
                      (when (set-member? s x)
                        (set-add! i* x)))
                    (set->list i))
          (loop (cdr ss) i*)]))]))

(define (set-subtract st0 . sts)
  (for-each
    (lambda (s)
      (unless (set? s)
        (not-set-error 'set-subtract s)))
    (cons st0 sts))
  (define diff (set-copy st0))
  (let loop ([sts sts])
    (cond
      [(null? sts) diff]
      [else
       (define st (car sts))
       (set-for-each
         (lambda (x)
           (when (set-member? st x)
             (set-remove! diff x)))
         diff)
       (loop (cdr sts))])))

(define (set-symmetric-difference st0 . sts)
  (for-each
    (lambda (s)
      (unless (set? s)
        (not-set-error 'set-symmetric-difference s)))
    (cons st0 sts))
  (define diff (set-copy st0))
  (let loop ([sts sts])
    (cond
      [(null? sts) diff]
      [else
       (define st (car sts))
       (set-for-each
         (lambda (x)
           (if (set-member? diff x)
               (set-remove! diff x)
               (set-add! diff x)))
         st)
       (loop (cdr sts))])))
