;;;   
;;; 'case'
;;;

(import "and-or.min" "define.min" "let.min" "stx.min"
        "stxcase.min" "stxcase-extra.min" "template.min"
        "when-unless.min")

(export case case-lambda)

(define-syntax (case stx)
  (syntax-case stx (else)
    [(_ v)                                              ; empty case
     #'(begin v (void))]
    [(_ v [else e es ...])                              ; else case
     #'(begin v (let-values () e es ...))]
    [(_ v [(k ...) e es ...] ...)                       ; missing else
     #'(case v [(k ...) e es ...] ... [else (void)])]
    [(_ v [(k ...) e es ...] ... [else x xs ...])       ; general case
     #'(let ([tmp v]) (case/else tmp [(k ...) e es ...] ... [else x xs ...]))]

    [(_ v cls ...)                                      ; error cases
     (let loop ([clauses (syntax->list #'(cls ...))])
       (unless (null? clauses)
         (let ([clause (car clauses)])
           (syntax-case clause ()
             [((_ ...) _ _ ...)
              (loop (cdr clauses))]
             [((_ ...) . _)
              (syntax-case clause ()
                [(_) (raise-syntax-error 'case "missing expression after datum sequence" stx clause)]
                [_ (raise-syntax-error 'case "not a datum sequence" stx clause)])]
             [(_ . _) (raise-syntax-error 'case "not a datum sequence" stx clause)]
             [_ (raise-syntax-error 'case "ill-formed clause" stx clause)]))))]
    [_ (raise-syntax-error 'case "bad syntax" stx)]))

(define-syntax (case/else stx)
  (syntax-case stx (else)
    [(_ v [(k ...) es ...] [else xs ...])
     #'(if (case/test v (k ...))
           (let-values () es ...)
           (let-values () xs ...))]
    [(_ v [(k ...) es ...] rest ... [else xs ...])
     #'(if (case/test v (k ...))
           (let-values () es ...)
           (case/else v rest ... [else xs ...]))]
    [(_ v [else xs ...])
     #'(let-values () xs ...)]))
  
(define-syntax (case/test stx)
  (syntax-case stx ()
    [(_ v ())
     (quote-syntax #f)]
    [(_ v (k))
     #'(equal? v 'k)]
    [(_ v (k ks ...))
     #'(if (equal? v 'k) #t (case/test v (ks ...)))]))

(define-syntax (case-lambda stx)
  (syntax-case stx ()
    [(_ (a e es ...) (a2 e2 e2s ...) ...)
     #'(lambda args
         (let-values ([(l) (length args)])
           (case-lambda/clause args l (a e es ...) (a2 e2 e2s ...) ...)))]
    [(_ cls ...)
     (let loop ([clauses (syntax->list #'(cls ...))])
       (unless (null? clauses)
         (let ([clause (car clauses)])
           (syntax-case clause ()
             [((_ ...) _ ...)
              (loop (cdr clauses))]
             [((_ ...) . _)
              (raise-syntax-error 'case-lambda "missing body after formals" stx clause)]
             [_
              (raise-syntax-error 'case-lambda "ill-formed clause" stx clause)]))))]
    [_ (raise-syntax-error 'case-lambda "bad syntax" stx)]))

(define-syntax case-lambda/clause
  (syntax-rules ()
   [(_ args l ((a ...) e ...) clause ...)
    (if (= l (length '(a ...)))
        (apply (lambda (a ...) e ...) args)
        (case-lambda/clause args l clause ...))]
   [(_ args l ((a . rest) e ...) clause ...)
    (case-lambda/improper args l 1 (a . rest) (rest e ...) clause ...)]
   [(_ args l (a e ...) clause ...)
    (let-values ([(a) args]) e ...)]
   [(_ args l)
    (error "arity mismatch: given ~a" l)]))

(define-syntax case-lambda/improper
  (syntax-rules ()
   [(_ args l k al ((a . rest) e ...) clause ...)
    (case-lambda/improper args l (+ k 1) al (rest e ...) clause ...)]
   [(_ args l k al (rest e ...) clause ...)
    (if (>= l k)
        (apply (lambda al e ...) args)
        (case-lambda/clause args l clause ...))]))
