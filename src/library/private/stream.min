;;;
;;; Stream
;;;

(import "list.min"
        "pre-base.min"
        "record.min")

(export gen:stream
        gen:stream?
        
        stream?
        stream-empty?
        stream-first
        stream-rest
        
        make-list-stream
        list-stream?
        make-vector-stream
        vector-stream?
        make-string-stream
        string-stream?
        make-integer-stream
        integer-stream?
        make-hashtable-stream
        hashtable-stream?
        make-port-stream
        port-stream?)

;;
;;  Generic function interface
;;

(define-generics stream
                 [stream-empty? s]
                 [stream-first s]
                 [stream-rest s])

(define $stream-empty?-acc (generics-accessor gen:stream 'stream-empty?))
(define $stream-first-acc (generics-accessor gen:stream 'stream-first))
(define $stream-rest-acc (generics-accessor gen:stream 'stream-rest))

;;
;;  Unsafe stream procedures
;;

(define (unsafe-stream-empty? s)
  (($stream-empty?-acc ($record-rtd s)) s))

(define (unsafe-stream-first s)
  (($stream-first-acc ($record-rtd s)) s))

(define (unsafe-stream-rest s)
  (($stream-rest-acc ($record-rtd s)) s))

;;
;;  Streams
;;

(define (stream? v)
  (and ($record-value? v)
       (gen:stream? ($record-rtd v))))

(define (stream-empty? s)
  (unless (stream? s)
    (error 'stream-empty? "expected a stream" s))
  (unsafe-stream-empty? s))

(define (stream-first s)
  (unless (stream? s)
    (error 'stream-first "expected a stream" s))
  (when (stream-empty? s)
    (error 'stream-first "stream is empty" s))
  (unsafe-stream-first s))

(define (stream-rest s)
  (unless (stream? s)
    (error 'stream-rest "expected a stream" s))
  (when (stream-empty? s)
    (error 'stream-rest "stream is empty" s))
  (unsafe-stream-rest s))

;;
;;  Streams for primitive types
;;

(define-record-type list-stream
  (opaque #t)
  (sealed #t)
  (fields v)
  (protocol
    (lambda (p)
      (lambda (l)
        (unless (list? l)
          (error 'make-list-stream "expected a list" l))
        (p l))))
  (methods gen:stream
    (lambda (s) (null? (list-stream-v s)))
    (lambda (s) (car (list-stream-v s)))
    (lambda (s) (make-list-stream (cdr (list-stream-v s))))))

(define-record-type vector-stream
  (opaque #t)
  (sealed #t)
  (fields v len i)
  (protocol
    (lambda (p)
      (lambda (v)
        (unless (vector? v)
          (error 'make-vector-stream "expected a vector" v))
        (p v (vector-length v) 0))))
  (methods gen:stream
    (lambda (s) (= (vector-stream-len s) (vector-stream-i s)))
    (lambda (s) (vector-ref (vector-stream-v s) (vector-stream-i s)))
    (lambda (s) 
      (define c (record-constructor vector-stream))
      (c (vector-stream-v s)
         (vector-stream-len s)
         (+ (vector-stream-i s) 1)))))

(define-record-type string-stream
  (opaque #t)
  (sealed #t)
  (fields s len i)
  (protocol
    (lambda (p)
      (lambda (s)
        (unless (string? s)
          (error 'make-string-stream "expected a vector" s))
        (p s (string-length s) 0))))
  (methods gen:stream
    (lambda (s) (= (string-stream-len s) (string-stream-i s)))
    (lambda (s) (string-ref (string-stream-s s) (string-stream-i s)))
    (lambda (s)
      (define c (record-constructor string-stream))
      (c (string-stream-s s)
         (string-stream-len s)
         (+ (string-stream-i s) 1)))))

(define-record-type integer-stream
  (opaque #t)
  (sealed #t)
  (fields start end step)
  (protocol
    (lambda (p)
      (case-lambda
        [(end)
         (make-integer-stream 0 end 1)]
        [(start end)
         (make-integer-stream start end 1)]
        [(start end step)
         (unless (and (integer? start) (>= start 0))
           (error 'make-integer-stream "expected an exact non-negative integer" start))
         (unless (and (integer? end) (>= end 0))
           (error 'make-integer-stream "expected an exact non-negative integer" end))
         (unless (integer? step)
           (error 'make-integer-stream "expected an exact integer" step))
         (p start end step)])))
  (methods gen:stream
    (lambda (s)
      (define start (integer-stream-start s))
      (define end (integer-stream-end s))
      (if (< (integer-stream-step s) 0)
          (<= start end)
          (>= start end)))
    (lambda (s)
      (integer-stream-start s))
    (lambda (s)
      (define start (integer-stream-start s))
      (define end (integer-stream-end s))
      (define step (integer-stream-step s))
      (make-integer-stream (+ start step) end step))))
  

(define-record-type hashtable-stream
  (opaque #t)
  (sealed #t)
  (fields ks ht)
  (protocol
    (lambda (p)
      (lambda (ht)
        (unless (hashtable? ht)
          (error 'make-hashtable-stream "expected a hashtable" ht))
        (p (hashtable-keys ht) ht))))
  (methods gen:stream
    (lambda (s)
      (null? (hashtable-stream-ks s)))
    (lambda (s)
      (define ks (hashtable-stream-ks s))
      (define ht (hashtable-stream-ht s))
      (cons (car ks) (hashtable-ref ht (car ks))))
    (lambda (s)
      (define c (record-constructor hashtable-stream))
      (c (cdr (hashtable-stream-ks s))
         (hashtable-stream-ht s)))))

(define-record-type port-stream
  (opaque #t)
  (sealed #t)
  (fields port)
  (protocol
    (lambda (p)
      (lambda (port)
        (unless (input-port? port)
          (error 'make-port-stream "expected an input port" port))
        (p port))))
  (methods gen:stream
    (lambda (s) (not (char-ready? (port-stream-port s))))
    (lambda (s) (peek-char (port-stream-port s)))
    (lambda (s)
      (define port (port-stream-port s))
      (read-char port)
      (make-port-stream port))))
