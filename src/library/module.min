;;;
;;;   File reader for importing Minim files
;;;

(import "base.min" "expander.min" "read.min")
(export read/module)

;; Base environment when loading modules
(define $base-env (environment))

;; Module caches
;;  name -> (exporting xforms, exporting values)
;;  name -> (current xforms, current env)
(define $module-table '())
(define $module-envs '())

;; prepares the evaluation environment given
;; an association list of additional values
(define ($eval-environment env imports)
  (define env* (extend-environment env))
  (let loop ([imports imports])
    (cond
      [(null? imports) env*]
      [else
       (define name (caar imports))
       (define value (cdar imports))
       (environment-set-variable-value! env* name value)
       (loop (cdr imports))])))

;; Like `$load-module`, but does not check the cache
(define (read/module path)
  ;; paths
  (define new-cwd (car (split-path path)))

  ;; module information
  (define exported '())
  (define imported '())
  (define imported-xforms '())
  (define imported-modules '())
  (define stx-env #f)
  (define module-xforms '())

  ;; read phase
  (define ($read)
    (define p (open-input-file path))
    (let loop ([exprs '()])
      (define datum (read p))
      (cond
        [(eof-object? datum)
         (close-input-port p)
         (reverse exprs)]
        [else
         (loop (cons datum exprs))])))

  ;; import phase
  (define ($import exprs)
    (let loop ([exprs exprs] [evalable '()])
      (cond
        [(null? exprs)
         (reverse evalable)]
        [else
         (define expr (syntax-e (car exprs)))
         (cond
           [(and (pair? expr) (eq? (syntax-e (car expr)) 'import))
            (write (cdr exprs)) (newline)
            (let loop2 ([imports (cdr expr)])
              (cond
                [(null? imports)
                 (loop (cdr exprs) evalable)]
                [(pair? imports)
                 (define maybe-import (syntax-e (car imports)))
                 (cond
                   [(string? maybe-import)
                    (define path (build-path new-cwd maybe-import))
                    (import path)
                    (define from-module (assoc path $module-table))
                    (set! imported-modules (cons path imported-modules))
                    (set! imported-xforms (merge-xforms (car from-module) imported-xforms))
                    (set! imported (append (cdr from-module) imported)) ; TODO: dedup
                    (loop2 (cdr imports))]
                   [else
                    (error 'import "bad import syntax")])]
                [else
                 (error 'import "bad import syntax")]))]
           [(and (pair? expr) (eq? (syntax-e (car expr)) 'export))
            (let loop2 ([exports (cdr expr)])
              (cond
                [(null? exports)
                 (loop (cdr exprs) evalable)]
                [(pair? exports)
                 (define maybe-export (syntax-e (car exports)))
                 (cond
                   [(symbol? maybe-export)
                    (set! exported (cons maybe-export exported))
                    (loop2 (cdr exports))]
                   [(pair? maybe-export)
                    (cond
                      [(eq? (syntax-e (car maybe-export)) 'all)
                       (define module-name (syntax-e (cadr maybe-export)))
                       (define path (build-path new-cwd module-name))
                       (cond
                         [(and (string? module-name)
                               (null? (cddr maybe-export))
                               (member path imported-modules))
                          (define from-module (assoc path $module-table))
                          (set! exported (append (map car (car from-module))
                                                 (map car (cdr from-module))
                                                 exported))
                          (loop2 (cdr exports))]
                         [else (error 'export "bad syntax")])]
                      [else (error 'export "bad syntax")])]
                   [else
                    (error 'export "bad syntax")])]
                [else
                 (error 'export "bad syntax")]))]
           [else
            (loop (cdr exprs) (cons (car exprs) evalable))])])))

  ;; expand phase
  (define ($expand exprs)
    ; setup environment
    (set! stx-env ($base-stx-env ($eval-environment $base-env imported)))
    ; testing
    (define-values (exprs* xforms*) (expand/module exprs imported-xforms stx-env))
    ; update
    (set! module-xforms xforms*)
    exprs*)

  ;; apply non-eval phases
  (define raw-exprs ($read))
  (define non-import-exprs ($import raw-exprs))
  (define expanded-exprs ($expand non-import-exprs))

  ;; return result
  (values expanded-exprs module-xforms imported exported stx-env))
