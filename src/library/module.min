;;;
;;;   File reader for importing Minim files
;;;

(import "base.min" "expander.min" "read.min")
(export read/module)

(define (writeln o)
  (write o)
  (newline))

;; Module caches
;;  name -> (exporting xforms, exporting values)
;;  name -> (expand env, eval env)
;;  name -> (exprs, xforms, imports, exports, expand env)
(define $module-table (make-hashtable))
(define $module-envs (make-hashtable))
(define $module-internals (make-hashtable))

;; Like `$load-module`, but does not check the cache
(define ($load-module path print-handler result-handler)
  ;; paths
  (define new-cwd (car (split-path path)))

  ;; module information
  (define scope (scope-extend $base-scope))
  (define exported '())
  (define imported '())
  (define imported-xforms '())
  (define imported-modules '())
  (define stx-env #f)
  (define module-xforms '())

  ;; read phase
  (define ($read)
    (define p (open-input-file path))
    (let loop ([exprs '()])
      (define datum (read p))
      (cond
        [(eof-object? datum)
         (close-input-port p)
         (reverse exprs)]
        [else
         (loop (cons datum exprs))])))

  ;; import phase
  (define ($import exprs)
    (let loop ([exprs exprs] [evalable '()])
      (cond
        [(null? exprs)
         (reverse evalable)]
        [else
         (define expr (syntax-e (car exprs)))
         (cond
           [(and (pair? expr) (eq? (syntax-e (car expr)) 'import))
            (let loop2 ([imports (cdr expr)])
              (cond
                [(null? imports)
                 (loop (cdr exprs) evalable)]
                [(pair? imports)
                 (define maybe-import (syntax-e (car imports)))
                 (define path (build-path new-cwd maybe-import))
                 (cond
                   [(string? maybe-import)
                    ($load-or-import path print-handler result-handler)
                    (define from-module (hashtable-ref $module-table path))
                    (set! imported-modules (cons path imported-modules))
                    (set! imported-xforms (merge-xforms (car from-module) imported-xforms))
                    (set! imported (append (cdr from-module) imported)) ; TODO: dedup
                    (for-each (lambda (name) (scope-add! scope name)) (map car (cdr from-module)))
                    (loop2 (cdr imports))]
                   [else
                    (error 'import "bad import syntax")])]
                [else
                 (error 'import "bad import syntax")]))]
           [(and (pair? expr) (eq? (syntax-e (car expr)) 'export))
            (let loop2 ([exports (cdr expr)])
              (cond
                [(null? exports)
                 (loop (cdr exprs) evalable)]
                [(pair? exports)
                 (define maybe-export (syntax-e (car exports)))
                 (cond
                   [(symbol? maybe-export)
                    (set! exported (cons maybe-export exported))
                    (loop2 (cdr exports))]
                   [(pair? maybe-export)
                    (cond
                      [(eq? (syntax-e (car maybe-export)) 'all)
                       (define module-name (syntax-e (cadr maybe-export)))
                       (define path (build-path new-cwd module-name))
                       (cond
                         [(and (string? module-name)
                               (null? (cddr maybe-export))
                               (member path imported-modules))
                          (define from-module (hashtable-ref $module-table path))
                          (set! exported (append (map car (car from-module))
                                                 (map car (cdr from-module))
                                                 exported))
                          (loop2 (cdr exports))]
                         [else (error 'export "bad export syntax")])]
                      [else (error 'export "bad export syntax")])]
                   [else
                    (error 'export "bad export syntax")])]
                [else
                 (error 'export "bad export syntax")]))]
           [else
            (loop (cdr exprs) (cons (car exprs) evalable))])])))

  ;; expand phase
  (define ($expand exprs)
    ; setup environment
    (set! stx-env ($base-stx-env ($eval-environment $base-env imported)))
    ; testing
    (define-values (exprs* xforms*) (expand/module exprs imported-xforms stx-env scope))
    ; update
    (set! module-xforms xforms*)
    exprs*)

  ;; apply non-eval phases
  (define raw-exprs ($read))
  (define non-import-exprs ($import raw-exprs))
  (define expanded-exprs ($expand non-import-exprs))

  ;; return result
  (values expanded-exprs module-xforms imported exported stx-env))

;; prepares the evaluation environment given
;; an association list of additional values
(define ($eval-environment env imports)
  (define env* (extend-environment env))
  (let loop ([imports imports])
    (cond
      [(null? imports) env*]
      [else
       (define name (caar imports))
       (define value (cdar imports))
       (environment-set-variable-value! env* name value)
       (loop (cdr imports))])))

;; evaluates a set of expressions under a given environment
(define ($eval-exprs exprs env print-handler)
  (let loop ([exprs exprs] [result (void)])
    (cond
      [(null? exprs) result]
      [else
       (define expr (syntax->datum (car exprs)))
       (call-with-values
         (lambda () (eval expr env))
         (lambda results
           (let loop2 ([results results] [prev (void)])
             (cond
               [(null? results)
                (loop (cdr exprs) prev)]
               [else
                (unless (void? (car results))
                  (writeln (car results)))
                (loop2 (cdr results) (car results))]))))])))

(define ($load-or-import-no-check path print-handler result-handler)
  ;; load expressions
  (define-values (exprs module-xforms imports exports stx-env)
    ($load-module path print-handler result-handler))
  ;; evaluate
  (define env ($eval-environment $base-env imports))
  (define last ($eval-exprs exprs env print-handler))
  ;; handle exports
  (define export-values '())
  (define export-xforms '())
  (let loop ([exports exports])
    (cond
      [(null? exports) (void)]
      [else
       (define export (car exports))
       (define maybe-xform (assoc export module-xforms))
       (cond
         [maybe-xform
          (define xform (cdr maybe-xform))
          (set! export-xforms (cons (cons export xform) export-xforms))]
         [else
          (define value
            (environment-variable-value env export
              (lambda () (error 'export "undefined export" export))))
          (set! export-values (cons (cons export value) export-values))])
       (loop (cdr exports))]))

  ;; update module table
  (hashtable-set! $module-table path (cons export-xforms export-values))
  (hashtable-set! $module-envs path (cons stx-env env))
  (hashtable-set! $module-internals path (list exprs module-xforms imports exports stx-env))

  ;; and done
  (when result-handler
    (result-handler last)))

;; REPL with env
(define ($repl xforms stx-env env)
  (let loop ([xforms xforms])
    ; read
    (display "> ")
    (define expr (read))
    (when (eof-object? expr) (exit))
    ; expand
    (define-values (expr* xforms*) (expand expr xforms stx-env))
    ;; evaluate and display
    (call-with-values
      (lambda () (eval (syntax->datum expr*) env))
      (lambda results
        (for-each (lambda (result)
                    (unless (void? result)
                      (writeln result)))
                  results)))
    ; loop
    (loop xforms*)))

(define ($load-or-import name print-handler result-handler)
  ;; resolve path
  (define path
    (if (is-absolute-path? name)
        name
        (build-path (current-directory) name)))
  ;; check cache first
  (unless (hashtable-contains? $module-table path)
    ($load-or-import-no-check path print-handler result-handler)))

(define (read/module name)
  ;; resolve path
  (define path
    (if (is-absolute-path? name)
        name
        (build-path (current-directory) name)))
  ($load-module path #f #f))

;; imports a file
(define (import name)
  ($load-or-import name (lambda (o) (writeln o)) #f))

;; loads a file
(define (load name)
  (define result ($load-or-import name #f (lambda (o) o)))
  (unless (void? result) (writeln result))
  (enter! name))

(define (enter! name)
  ;; resolve path
  (define path
    (if (is-absolute-path? name)
        name
        (build-path (current-directory) name)))
  ;; set up environments
  (unless (hashtable-contains? $module-envs path)
    (error 'enter! "unknown module" name))
  (define envs (hashtable-ref $module-envs path))
  (define xforms (second (hashtable-ref $module-internals path)))
  ;; REPL
  ($repl xforms
         (extend-environment (car envs))
         (extend-environment (cdr envs))))
