;;;
;;;  Makes the boot file for the interpreter
;;;  

(import "base.min" "module.min")


;;
;;  Metadata
;;

(define boot-info
  '(("private/list.min"
     member
     filter
     foldl
     foldr
     assoc)
    ("private/path.min"
     is-absolute-path?
     build-path
     path->list
     split-path)
    ("private/string.min"
     substring)
    ("expander.min"
     $expander-pattern-vars
     $base-stx-env
     lookup-xform
     merge-xforms
     expand/module
     expand)
    ("module.min"
     $base-env
     $module-table
     $module-envs
     $module-internals
     writeln
     $load-module
     $eval-environment
     $eval-exprs
     $load-or-import-no-check
     $repl
     $load-or-import
     read/module)
    ("read.min"
     read)))

;;
;;  module processing
;;

(define (->absolute-path fname)
  (if (is-absolute-path? fname)
      fname
      (build-path (current-directory) fname)))

(define (module-definitions exprs)
  (define ((_-form? form-name) expr)
    (and (stx-pair? expr)
          (let ([head (stx-car expr)])
            (and (identifier? head)
                (eq? (syntax-e head) form-name)))))
  (define define-values-form? (_-form? 'define-values))
  (define defs (make-hashtable))
  (for-each (lambda (stx)
              (when (define-values-form? stx)
                (define expr (syntax->datum stx))
                (hashtable-set! defs (first (second expr)) expr)))
            exprs)
  defs)

(define (write-module-definitions path defs boot-file)
  (define-values (exprs xforms imports exports _) (read/module path))
  (define all-defs (module-definitions exprs))
  (for-each (lambda (def)
              (unless (hashtable-contains? all-defs def)
                (error 'write-module-definitions "missing definition" path def))
              (write (hashtable-ref all-defs def) boot-file)
              (newline boot-file))
            defs))

;;
;;  entry point
;;

(define (main args)
  (unless (= (length args) 3)
    (error 'gen-boot.min "USAGE: minim gen-boot.min <BASEDIR> <OUTFILE>")
    (exit 1))
  
  (define base (second args))
  (define fname (third args))

  (printf "Generating boot file at ~a\n" fname)
  (printf "Standard library at ~a\n" base)

  (define boot-file (open-output-file (->absolute-path fname)))
  (define lib-base (->absolute-path base))

  (for-each (lambda (info)
              (define path (build-path lib-base (car info)))
              (define defs (cdr info))
              (write-module-definitions path defs boot-file))
            boot-info)
  (close-output-port boot-file))

(main (command-line))
