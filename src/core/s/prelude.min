; Wrapped primitives

;; --------------------------------------------------------
;; Characters

(define-values (char->integer)
  (lambda (x)
    (if (char? x)
        ($char->integer x)
        (error 'char->integer "expected char?" x))))

(define-values (integer->char)
  (lambda (x)
    (if (integer? x) ; TODO: bounds on characters
        ($integer->char x)
        (error 'integer->char "expected integer?" x))))

;; --------------------------------------------------------
;; Numbers

; TODO: update once we have more number types
(define-values (integer?) fixnum?)
(define-values (number?) fixnum?)

(define-values (+)
  (lambda args
    (if (null? args) ; 0 arguments
        0
        (if (null? ($cdr args)) ; 1 arguments
            ($car args)
            (if (null? ($cdr args)) ; 2 arguments
                ($fx2+ ($car args) ($cadr args))
                (letrec-values ([(loop) ; 3+ arguments
                                 (lambda (x xs)
                                    (if (null? xs)
                                        x
                                        (loop ($fx2+ x ($car xs)) ($cdr xs))))])
                  (loop ($fx2+ ($car args) ($cadr args))
                        ($cddr args))))))))

;; --------------------------------------------------------
;; Pairs

(define-values (car)
  (lambda (x) 
    (if (pair? x)
        ($car x)
        (error 'car "expected pair?" x))))

(define-values (cdr)
  (lambda (x) 
    (if (pair? x)
        ($cdr x)
        (error 'cdr "expected pair?" x))))

(define-values (caar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caar "(pairof pair? any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                ($car t)
                (oops! x)))
          (oops! x)))))

(define-values (cadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadr "(pairof any pair?)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                ($car t)
                (oops! x)))
          (oops! x)))))

(define-values (cdar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdar "(pairof pair? any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                ($cdr t)
                (oops! x)))
          (oops! x)))))

(define-values (cddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddr "(pairof any pair?)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                ($cdr t)
                (oops! x)))
          (oops! x)))))

(define-values (caaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaar "(pairof (pairof pair? any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caadr "(pairof any (pairof pair? any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadar "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caddr "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaar "(pairof (pairof pair? any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdadr "(pairof any (pairof pair? any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddar "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdddr "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caaaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaaar "(pairof (pairof (pairof pair? any) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caaadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaadr "(pairof any (pairof (pairof pair? any) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caadar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caadar "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caaddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaddr "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadaar "(pairof (pairof (pairof any pair?) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadadr "(pairof any (pairof (pairof any pair?) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caddar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caddar "(pairof (pairof any (pairof any pair?)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadddr "(pairof (pairof any (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaaar "(pairof (pairof (pairof pair? any) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaadr "(pairof any (pairof (pairof pair? any) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdadar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdadar "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaddr "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddaar "(pairof (pairof (pairof any pair?) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddadr "(pairof any (pairof (pairof any pair?) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdddar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdddar "(pairof (pairof any (pairof any pair?)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddddr "(pairof (pairof any (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (set-car!)
  (lambda (p x)
    (if (pair? p)
        ($set-car! p x)
        (error 'set-car! "expected pair?" p))))

(define-values (set-cdr!)
  (lambda (p x)
    (if (pair? p)
        ($set-cdr! p x)
        (error 'set-cdr! "expected pair?" p))))

;; --------------------------------------------------------
;; Lists

(define-values (list) (lambda args args))
