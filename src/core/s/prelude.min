; Wrapped primitives

;; --------------------------------------------------------
;; Characters

(define-values (char->integer)
  (lambda (x)
    (if (char? x)
        ($char->integer x)
        (error 'char->integer "expected char?" x))))

(define-values (integer->char)
  (lambda (x)
    (if (integer? x) ; TODO: bounds on characters
        ($integer->char x)
        (error 'integer->char "expected integer?" x))))

;; --------------------------------------------------------
;; Numbers

; TODO: update once we have more number types
(define-values (integer?) fixnum?)
(define-values (number?) fixnum?)

(define-values (+)
  (lambda xs
    (if (null? xs) ; 0 arguments
        0
        (if (number? ($car xs))
            (if (null? ($cdr xs)) ; 1 argument
                ($car xs)
                (if (number? ($cadr xs))
                    (if (null? ($cdr xs)) ; 2 arguments
                        ($fx2+ ($car xs) ($cadr xs))
                        (letrec-values ([(loop) ; 3+ arguments
                                         (lambda (x xs)
                                            (if (null? xs)
                                                x
                                                (if (number? ($car xs))
                                                    (loop ($fx2+ x ($car xs)) ($cdr xs))
                                                    (error '+ "expected number" ($car xs)))))])
                          (loop ($fx2+ ($car xs) ($cadr xs)) ($cddr xs))))
                    (error '+ "expected number" ($cadr xs))))
            (error '+ "expected number" ($car xs))))))
        
(define-values (-)
  (lambda (x . xs)
    (if (number? x)
        (if (null? xs) ; 1 argument
            ($fxneg x)
            (if (number? ($car xs))
                (if (null? ($cdr xs)) ; 2 arguments
                    ($fx2- x ($car xs))
                    (letrec-values ([(loop) ; 3+ arguments
                                     (lambda (x xs)
                                        (if (null? xs)
                                            x
                                            (if (number? ($car xs))
                                                (loop ($fx2- x ($car xs)) ($cdr xs))
                                                (error '- "expected number" ($car xs)))))])
                      (loop ($fx2- x ($car xs)) ($cdr xs))))
                (error '- "expected number" ($car xs))))
        (error '- "expected number" x))))

(define-values (*)
  (lambda xs
    (if (null? xs) ; 0 arguments
        1
        (if (number? ($car xs))
            (if (null? ($cdr xs)) ; 1 argument
                ($car xs)
                (if (number? ($cadr xs))
                    (if (null? ($cdr xs)) ; 2 arguments
                        ($fx2* ($car xs) ($cadr xs))
                        (letrec-values ([(loop) ; 3+ arguments
                                         (lambda (x xs)
                                            (if (null? xs)
                                                x
                                                (if (number? ($car xs))
                                                    (loop ($fx2* x ($car xs)) ($cdr xs))
                                                    (error '* "expected number" ($car xs)))))])
                          (loop ($fx2* ($car xs) ($cadr xs)) ($cddr xs))))
                    (error '* "expected number" ($cadr xs))))
            (error '* "expected number" ($car xs))))))

(define-values (/)
  (lambda (x . xs)
    (if (number? x)
        (if (null? xs) ; 1 argument
            (if (= x 0)
                (error '/ "division by zero" 1 x)
                ($fx2/ 1 x))
            (if (number? ($car xs))
                (if (= ($car xs) 0)
                    (error '/ "division by zero" x ($car xs))
                    (if (null? ($cdr xs)) ; 2 arguments         
                        ($fx2/ x ($car xs))
                        (letrec-values ([(loop) ; 3+ arguments
                                         (lambda (x xs)
                                            (if (null? xs)
                                                x
                                                (if (number? ($car xs))
                                                    (if (= ($car xs) 0)
                                                        (error '/ "division by zero" x ($car xs))
                                                        (loop ($fx2/ x ($car xs)) ($cdr xs)))
                                                    (error '/ "expected number" ($car xs)))))])
                          (loop ($fx2/ x ($car xs)) ($cdr xs)))))
                (error '/ "expected number" ($car xs))))
        (error '/ "expected number" x))))

(define-values (remainder)
  (lambda (x y)
    (if (number? x)
        (if (number? y)
            ($fxremainder x y)
            (error 'remainder "expected number" y))
        (error 'remainder "expected number" x))))

(define-values (modulo)
  (lambda (x y)
    (if (number? x)
        (if (number? y)
            ($fxmodulo x y)
            (error 'modulo "expected number" y))
        (error 'modulo "expected number" x))))

(define-values (add1)
  (lambda (x)
    (if (number? x)
        ($fx2+ x 1)
        (error 'add1 "expected number" x))))

(define-values (sub1)
  (lambda (x)
    (if (number? x)
        ($fx2- x 1)
        (error 'sub1 "expected number" x))))

(define-values (= > < >= <=)
  (let-values ([(go)
                (lambda (cmp name)
                  (lambda (x . xs)
                    (if (number? x)
                        (if (null? xs) ; 1 argument
                            #t
                            (letrec-values ([(loop)
                                             (lambda (x xs)
                                               (if (null? xs)
                                                   #t
                                                   (if (number? ($car xs))
                                                       (if (cmp x ($car xs))
                                                           (loop ($car xs) ($cdr xs))
                                                           #f)
                                                       (error name "expected number" ($car xs)))))])
                              (loop x xs)))
                    (error name "expected number" ($car xs)))))])

    (values (go $fx2= '=)
            (go $fx2> '>)
            (go $fx2< '<)
            (go $fx2>= '<=)
            (go $fx2<= '>=))))

;; --------------------------------------------------------
;; Pairs

(define-values (car)
  (lambda (x) 
    (if (pair? x)
        ($car x)
        (error 'car "expected pair?" x))))

(define-values (cdr)
  (lambda (x) 
    (if (pair? x)
        ($cdr x)
        (error 'cdr "expected pair?" x))))

(define-values (caar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caar "(pairof pair? any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                ($car t)
                (oops! x)))
          (oops! x)))))

(define-values (cadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadr "(pairof any pair?)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                ($car t)
                (oops! x)))
          (oops! x)))))

(define-values (cdar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdar "(pairof pair? any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                ($cdr t)
                (oops! x)))
          (oops! x)))))

(define-values (cddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddr "(pairof any pair?)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                ($cdr t)
                (oops! x)))
          (oops! x)))))

(define-values (caaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaar "(pairof (pairof pair? any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caadr "(pairof any (pairof pair? any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadar "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caddr "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($car t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaar "(pairof (pairof pair? any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdadr "(pairof any (pairof pair? any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddar "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdddr "(pairof (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      ($cdr t)
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caaaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaaar "(pairof (pairof (pairof pair? any) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caaadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaadr "(pairof any (pairof (pairof pair? any) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caadar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caadar "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caaddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caaddr "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadaar "(pairof (pairof (pairof any pair?) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadadr "(pairof any (pairof (pairof any pair?) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (caddar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'caddar "(pairof (pairof any (pairof any pair?)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cadddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cadddr "(pairof (pairof any (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($car t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaaar "(pairof (pairof (pairof pair? any) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaadr "(pairof any (pairof (pairof pair? any) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdadar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdadar "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdaddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdaddr "(pairof (pairof any (pairof pair? any)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($car t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddaar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddaar "(pairof (pairof (pairof any pair?) any) any)" x))])               
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddadr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddadr "(pairof any (pairof (pairof any pair?) any))" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($car t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cdddar)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cdddar "(pairof (pairof any (pairof any pair?)) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($car x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (cddddr)
  (let-values ([(oops!)
                (lambda (x)
                  (error 'cddddr "(pairof (pairof any (pairof any pair?) any)" x))]) 
    (lambda (x)
      (if (pair? x)
          (let-values ([(t) ($cdr x)])
            (if (pair? t)
                (let-values ([(t) ($cdr t)])
                  (if (pair? t)
                      (let-values ([(t) ($cdr t)])
                        (if (pair? t)
                            ($cdr t)
                            (oops! x)))
                      (oops! x)))
                (oops! x)))
          (oops! x)))))

(define-values (set-car!)
  (lambda (p x)
    (if (pair? p)
        ($set-car! p x)
        (error 'set-car! "expected pair?" p))))

(define-values (set-cdr!)
  (lambda (p x)
    (if (pair? p)
        ($set-cdr! p x)
        (error 'set-cdr! "expected pair?" p))))

;; --------------------------------------------------------
;; Lists

(define-values (list) (lambda args args))

(define-values (make-list)
  (lambda (len init)
    (if (if (integer? len) (>= len 0) #f)
        ($make-list len init)
        (error 'length "expected non-negative integer" len))))

(define-values (length)
  (lambda (xs)
    (if (list? xs)
        ($length xs)
        (error 'length "expected list" xs))))

(define-values (reverse)
  (lambda (xs)
    (if (list? xs)
        ($reverse xs)
        (error 'reverse "expected list" xs))))

(define-values (append)
  (lambda xss
    (if (null? xss) ; 0 arguments
        '()
        (if (list? ($car xss))
            (if (null? ($cdr xss)) ; 1 argument
                ($car xss)
                (letrec-values ([(loop)
                                 (lambda (acc xss)
                                   (if (null? xss)
                                       acc
                                       (if (list? ($car xss))
                                           (loop ($append2 ($car xss) acc) ($cdr xss))
                                           (error 'append "expected list?" ($car xss)))))]
                                [(xss*) ($reverse xss)])
                  (loop ($car xss*) ($cdr xss*))))
            (error 'append "expected list?" ($car xss))))))

(define-values (for-each map andmap ormap)
  (letrec-values ([(for-each1) ; optimized `for-each` for one argument
                   (lambda (f xs)
                     (if (null? xs)
                         (void)
                         (begin
                           (f ($car xs))
                           (for-each1 f ($cdr xs)))))]
                  [(map1) ; optimized `map` for one argument
                   (lambda (f xs)
                     (letrec-values ([(loop)
                                      (lambda (xs acc)
                                        (if (null? xs)
                                            (reverse acc)
                                            (loop ($cdr xs) (cons (f ($car xs)) acc))))])
                       (loop xs '())))]
                  [(andmap1) ; optimized `andmap` for one argument
                   (lambda (pred? xs)
                     (if (null? xs)
                         #t
                         (if (pred? ($car xs))
                             (andmap1 pred? ($cdr xs))
                             #f)))]
                  [(ormap1) ; optimized `ormap` for one argument
                   (lambda (pred? xs)
                     (if (null? xs)
                         #f
                         (if (pred? ($car xs))
                             #t
                             (ormap1 pred? ($cdr xs)))))]
                  [(check-args!)
                   (lambda (who f xss)
                     (if (procedure? f)
                         (letrec-values ([(loop)
                                          (lambda (prev-len xss)
                                            (if (null? xss)
                                                (void)
                                                (if (list? ($car xss))
                                                    (let-values ([(len) ($length ($car xss))])
                                                      (if (if prev-len
                                                              (= prev-len len)
                                                              #t)
                                                          (loop len ($cdr xss))
                                                          (error who "lists do not have same size"
                                                                 len prev-len)))
                                                    (error who "expected list?" ($car xss)))))])
                           (loop #f xss))
                         (error who "expected procedure?" f)))])
    (values
      ;; for-each
      (lambda (f xs . xss)
        (check-args! 'for-each f (cons xs xss))
        (if (null? xss)
            (for-each1 f xs)
            (letrec-values ([(loop)
                             (lambda (xss)
                                (if (ormap1 null? xss)
                                    (void)
                                    (begin
                                      (apply f (map1 $car xss))
                                      (loop (map1 $cdr xss)))))])
                    (loop (cons xs xss)))))
      ;; map
      (lambda (f xs . xss)
        (check-args! 'map f (cons xs xss))
        (if (null? xss)
            (map1 f xs)
            (letrec-values ([(loop)
                             (lambda (xss acc)
                                (if (ormap1 null? xss)
                                    (reverse acc)
                                    (loop (map1 $cdr xss)
                                          (cons (apply f (map1 $car xss)) acc))))])
              (loop (cons xs xss) '()))))
      ;; andmap
      (lambda (f xs . xss)
        (check-args! 'andmap f (cons xs xss))
        (if (null? xss)
            (andmap1 f xs)
            (letrec-values ([(loop)
                             (lambda (xss)
                                (if (ormap1 null? xss)
                                    #t
                                    (if (apply f (map1 $car xss))
                                        (loop (map1 $cdr xss))
                                        #f)))])
              (loop (cons xs xss)))))
      ;; ormap
      (lambda (f xs . xss)
        (check-args! 'ormap f (cons xs xss))
        (if (null? xss)
            (ormap1 f xs)
            (letrec-values ([(loop)
                             (lambda (xss)
                                (if (ormap1 null? xss)
                                    #f
                                    (if (apply f (map1 $car xss))
                                        #t
                                        (loop (map1 $cdr xss)))))])
              (loop (cons xs xss))))))))

;; --------------------------------------------------------
;; Vector

(define-values (vector)
  (lambda args ($list->vector args)))

(define-values (make-vector)
  (lambda args ; TODO: case-lambda
    (let-values ([(argc) ($length args)])
      (if (if (>= argc 1) (<= argc 2) #f)
          (let-values ([(len) ($car args)]
                       [(init) (if (= argc 2) ($cadr args) 0)])
            (if (if (integer? len) (>= len 0) #f)
                ($make-vector len init)
                (error 'make-vector "expected non-negative integer" len)))
          (error 'make-vector "expected 1 or 2 arguments" argc)))))

(define-values (vector-length)
  (lambda (v)
    (if (vector? v)
        ($vector-length v)
        (error 'vector-length "expected vector?" v))))

(define-values (vector-ref)
  (lambda (v idx)
    (if (vector? v)
        (if (if (integer? idx) (>= idx 0) #f)
            (if (>= idx ($vector-length v))
                (error 'vector-ref "index out of range" idx)
                ($vector-ref v idx))
            (error 'vector-ref "expected non-negative integer" len))
        (error 'vector-ref "expected vector?" v))))

(define-values (vector-set!)
  (lambda (v idx x)
    (if (vector? v)
        (if (if (integer? idx) (>= idx 0) #f)
            (if (>= idx ($vector-length v))
                (error 'vector-set! "index out of range" idx)
                ($vector-set! v idx x))
            (error 'vector-set! "expected non-negative integer" len))
        (error 'vector-set! "expected vector?" v))))

(define-values (vector-fill!)
  (lambda (v x)
    (if (vector? v)
        ($vector-fill! v x)
        (error 'vector->list "expected vector?" v))))

(define-values (list->vector)
  (lambda (xs)
    (if (list? xs)
        ($list->vector xs)
        (error 'list->vector "expected list?" xs))))

(define-values (vector->list)
  (lambda (v)
    (if (vector? v)
        ($vector->list v)
        (error 'vector->list "expected vector?" v))))

;; --------------------------------------------------------
;; Boxes

(define-values (unbox)
  (lambda (x)
    (if (box? x)
        ($unbox x)
        (error 'unbox "expected box?" x))))

(define-values (set-box!)
  (lambda (x v)
    (if (box? x)
        ($set-box! x v)
        (error 'set-box! "expected box?" x))))

;; --------------------------------------------------------
;; Hashtables
